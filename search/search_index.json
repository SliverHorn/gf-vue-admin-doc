{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"\u7b80\u4ecb"},{"location":"Introduction/","text":"","title":"\u4ecb\u7ecd"},{"location":"Manual/","text":"GFVA\u5c0f\u767d\u8bf4\u660e\u4e66 1. \u76ee\u5f55\u7ed3\u6784 2. \u5b9e\u6218\u57fa\u7840\u64cd\u4f5c \u672c\u9879\u76ee\u7684\u7f16\u7a0b\u73af\u5883 \u63a8\u8350 \u5f00\u53d1\u73af\u5883(\u6307\u7684\u662f\u5f00\u53d1\u6b64\u9879\u76ee\u7684\u5f00\u53d1\u73af\u5883) Golang 1.11 1.14.4 MySQL 8.0 8.0.19 nodejs \u6700\u65b0\u7684LTS 12.16.1 2.1 \u4e0b\u8f7d\u6216\u514b\u9686\u9879\u76ee git clone https://github.com/flipped-aurora/gf-vue-admin.git 2.2 \u5b89\u88c5\u4f9d\u8d56 2.2.1 \u524d\u7aef\u9879\u76ee\u4e0b\u8f7d\u4f9d\u8d56 // \u8fdb\u5165web\u6587\u4ef6\u5939 cd web // \u4f7f\u7528npm\u6216\u8005cnpm\u8fdb\u884c\u4e0b\u8f7d\u4f9d\u8d56 cnpm i || npm i 2.2.2 \u540e\u7aef\u9879\u76ee\u4e0b\u8f7d\u4f9d\u8d56 # \u6ce8\u610f\u4e0d\u8981\u4f7f\u7528gopm # \u5f00\u542fgo module go env -w GO111MODULE=on # \u8bbe\u7f6e\u4ee3\u7406 go env -w GOPROXY=https://goproxy.io,direct 2.3 \u521d\u59cb\u5316 2.3.1 \u6570\u636e\u5e93\u521d\u59cb\u5316\u6570\u636e \u65b0\u5efa\u6570\u636e\u5e93,\u540d\u5b57\u81ea\u53d6. \u5c06server/document/gf-vue-admin.sql\u5bfc\u5165\u5230\u65b0\u5efa\u7684\u6570\u636e\u5e93 2.3.2 server\u7684\u914d\u7f6e\u6587\u4ef6 \u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8eserver/config \u6309\u9700\u4fee\u6539config.toml\u6587\u4ef6 \u5982\u9700\u8be6\u7ec6\u7684\u914d\u7f6e\u6587\u4ef6, \u70b9\u6211 3.\u524d\u7aef\u9879\u76ee \u524d\u7aef\u662fVue\u9879\u76ee \u4f7f\u7528VsCode\u6216\u8005WebStorm\u6253\u5f00web\u6587\u4ef6\u5939 \u4f7f\u7528 npm run serve \u6216\u8005 cnpm run serve \u5373\u53ef\u542f\u52a8\u9879\u76ee 4.\u540e\u7aef\u9879\u76ee \u540e\u7aef\u662fGolang\u9879\u76ee \u4f7f\u7528VsCode(\u9700\u8981\u81ea\u884c\u4e0b\u8f7dVsCode\u7684go\u5f00\u53d1\u63d2\u4ef6)\u6216\u8005Goland\u6253\u5f00server\u6587\u4ef6\u5939, \u4ee5Goland\u4e3a\u4f8b\u8fdb\u884c\u8bf4\u660e \u8fdb\u5165GoLand\u7684File \u2192 settings \u2192 Go \u2192 Go Modules\uff0c\u5c06 Environment \u9879\u7684\u503c\u8bbe\u7f6e\u4e3a GOPROXY=https://goproxy.io,direct \u6253\u5f00server/go.mod\u6587\u4ef6,\u5728\u6587\u4ef6\u7a7a\u767d\u5904\u9f20\u6807\u53f3\u952e\u70b9\u51fb Go Mod Tidy \u5b8c\u6210\u540e\u6253\u5f00server/main.go, \u5728\u6587\u4ef6\u7a7a\u767d\u5904\u9f20\u6807\u53f3\u952e\u70b9\u51fb \u8fd0\u884c'go build main.go' ,\u6216\u8005\u4f7f\u7528\u56fe\u4e2d\u7ea2\u8272\u6846\u7684\u53f3\u8fb9\u7684\u5feb\u6377\u952e\u7ec4\u5408\u8fdb\u884c\u542f\u52a8\u9879\u76ee 5.\u81ea\u52a8\u4ee3\u7801\u751f\u6210(\u6570\u636e\u5e93\u8868) \u70b9\u51fb\u5de6\u4fa7\u83dc\u5355\u4e2d\u7684 \u7cfb\u7edf\u5de5\u5177 > \u4ee3\u7801\u751f\u6210\u5668 ,\u4ee3\u7801\u751f\u6210\u5668\u662f\u7528\u6765\u751f\u6210CURD\u4ee3\u7801\u7684\u3002 \u70b9\u51fb \u70b9\u8fd9\u91cc\u4ece\u73b0\u6709\u6570\u636e\u5e93\u521b\u5efa\u4ee3\u7801 \u9009\u62e9 \u6570\u636e\u5e93\u540d \u4ee5\u53ca \u8868\u540d \u70b9\u51fb \u4f7f\u7528\u6b64\u8868\u521b\u5efa \u81ea\u884c\u7f16\u8f91\u597d\u5404\u4e2a Filed \u7684\u6240\u9700\u7684\u641c\u7d22\u6761\u4ef6,\u6216\u8005\u5176\u4ed6\u81ea\u5df1\u8981\u4fee\u6539\u7684\u5730\u65b9, \u4fee\u6539\u540e\u70b9\u51fb\u751f\u6210\u4ee3\u7801 \u70b9\u51fb\u540e\u5c31\u53ef\u4ee5\u770b\u5230\u5de6\u4e0b\u89d2\u6216\u8005\u4e0b\u8f7d\u5185\u5bb9\u91cc\u6709\u4e00\u4e2a\u4e0b\u8f7d\u597d\u4e86\u7684gf-vue-admin.zip\u6587\u4ef6 \u89e3\u538bgf-vue-admin.zip\u540e\u4f1a\u770b\u5230\u91cc\u9762\u6709\u4e2a autoCode \u6587\u4ef6\u5939\uff0cautoCode \u91cc\u7684 te \u6587\u4ef6\u5939\u4e3a\u81ea\u52a8\u751f\u6210\u7684\u540e\u7aef\u4ee3\u7801\uff0cfe\u6587\u4ef6\u5939\u4e3a\u81ea\u52a8\u751f\u6210\u7684\u524d\u7aef\u4ee3\u7801\u3002 te\u6587\u4ef6\u5939 \u2192 \u540e\u7aef\u4ee3\u7801\uff1a api \u4e0b\u7684 .go \u6587\u4ef6\u653e\u5230 server/app/api/v1 \u4e0b\u3002 user(\u8fd9\u4e2a\u6587\u4ef6\u5939\u662f\u52a8\u6001\u7684,\u5177\u4f53\u7684\u662fPackageName(\u6587\u4ef6\u540d\u79f0)\u8fd9\u4e2a\u5b57\u6bb5) \u4e0b\u7684 \u6574\u4e2a\u6587\u4ef6\u5939 \u653e\u5230server/app/model \u4e0b\u3002 request \u4e0b\u7684 .go \u6587\u4ef6\u653e\u5230\u540e\u7aef\u9879\u76ee\u4e2d\u7684 server/app/api/request\u4e0b\u3002 router \u4e0b\u7684 .go \u6587\u4ef6\u653e\u5230\u540e\u7aef\u9879\u76ee\u4e2d\u7684 server/router \u4e0b\u3002 service \u4e0b\u7684 .go \u6587\u4ef6\u653e\u5230\u540e\u7aef\u9879\u76ee\u4e2d\u7684 server/app/service \u4e0b\u3002 fe\u6587\u4ef6\u5939 \u2192 \u524d\u7aef\u4ee3\u7801\uff1a api \u4e0b\u7684 .js \u6587\u4ef6\u653e\u5230 web/src/api \u4e0b\u3002 table \u4e0b\u7684 .vue \u6587\u4ef6\u653e\u5230\u524d\u7aef\u9879\u76ee\u4e2d\u7684 web/src/api/view/ (PackageName(\u6587\u4ef6\u540d\u79f0)\u81ea\u5efa) \u4e0b\u3002 6. \u6ce8\u518c\u8def\u7531 \u6253\u5f00 server/router/router.go \u6587\u4ef6,\u5728InitializeRouters\u65b9\u6cd5\u4e2d,\u81ea\u884c\u8c03\u7528\u751f\u6210autoCode/te/router\u7684 .go \u6587\u4ef6\u7684\u65b9\u6cd5 7. \u914d\u7f6e\u76ee\u5f55\u83dc\u5355 \u8fdb\u5165\u7cfb\u7edf \u8d85\u7ea7\u7ba1\u7406\u5458 \u2192 \u83dc\u5355\u7ba1\u7406 \u83dc\u5355\uff0c\u70b9\u51fb \u65b0\u589e\u6839\u83dc\u5355 \u6309\u94ae\uff0c\u914d\u7f6e\u83dc\u5355\u4fe1\u606f\u3002 \u8def\u7531name\uff1a\u5bf9\u5e94\u8fdb\u5165\u5217\u8868\u663e\u793a\u9875\u9762\u65f6\u7684\u8bbf\u95ee\u8def\u5f84 \u8def\u7531path\uff1a\u9009\u4e2d\u540e\u8fb9\u7684\u201c\u6dfb\u52a0\u53c2\u6570\u201d\u540e\u624d\u53ef\u4ee5\u8f93\u5165\uff0c\u5bf9\u5e94\u8fdb\u5165\u5217\u8868\u663e\u793a\u9875\u9762\u65f6\u8bbf\u95ee\u8def\u5f84\u540e\u7684\u53c2\u6570 \uff08\u6ca1\u7528\u8fc7\uff0c\u76ee\u6d4b\u662f\u9171\u5a76\u7684\uff09 \u662f\u5426\u9690\u85cf\uff1a\u662f\u5426\u5728\u7cfb\u7edf\u5de6\u4fa7\u76ee\u5f55\u83dc\u5355\u663e\u793a\u65f6\uff0c\u9690\u85cf\u6389\u8be5\u76ee\u5f55\u83dc\u5355 \u7236\u8282\u70b9Id\uff1a\u8be5\u76ee\u5f55\u83dc\u5355\u7684\u7236\u7ea7\u76ee\u5f55\u83dc\u5355\u3002\u8fd9\u91cc\u662f\u81ea\u52a8\u586b\u5145\u7684\u6570\u636e\uff0c\u4e0d\u9700\u8981\u81ea\u5df1\u64cd\u4f5c \u6587\u4ef6\u8def\u5f84\uff1a\u5bf9\u5e94\u524d\u7aef\u9879\u76ee\u4e2d /view/struct\u7b80\u79f0\u6587\u4ef6\u5939\uff08\u81ea\u5efa\uff09/struct\u7b80\u79f0.vue \u6587\u4ef6 \u5c55\u793a\u540d\u79f0\uff1a\u8be5\u76ee\u5f55\u83dc\u5355\u663e\u793a\u5728\u7cfb\u7edf\u5de6\u4fa7\u76ee\u5f55\u83dc\u5355\u4e2d\u7684\u540d\u79f0 \u56fe\u6807\uff1a\u8be5\u76ee\u5f55\u83dc\u5355\u663e\u793a\u5728\u7cfb\u7edf\u5de6\u4fa7\u76ee\u5f55\u83dc\u5355\u4e2d\u7684\u56fe\u6807 \u6392\u5e8f\u6807\u8bb0\uff1a\u7528\u4e8e\u8c03\u6574\u8be5\u76ee\u5f55\u83dc\u5355\u5728\u7cfb\u7edf\u5de6\u4fa7\u76ee\u5f55\u83dc\u5355\u4e2d\u663e\u793a\u7684\u4e0a\u4e0b\u4f4d\u7f6e \uff08\u6211\u731c\u7684\uff09 keepAlive\uff1a\u662f\u5426\u4f7f\u7528keepAlive\u7f13\u5b58 \uff08\u592a\u83dc\u4e86\uff0c\u867d\u7136\u77e5\u9053\u5e72\u561b\u7528\u4f46\u662f\u51e0\u884c\u5b57\u89e3\u91ca\u4e0d\u4e86\uff0c\u5982\u6709\u9700\u8981\uff0c\u8bf7\u81ea\u884c\u767e\u5ea6\uff09 \u4ee5\u4e0a\u914d\u7f6e\u597d\u540e\uff0c\u70b9\u51fb \u786e\u5b9a \u6309\u94ae\uff0c\u5b8c\u6210\u83dc\u5355\u914d\u7f6e\u3002 8. \u914d\u7f6e\u540e\u7aef\u63a5\u53e3 \u5982\u679c\u662f\u81ea\u52a8\u751f\u6210\u7684\u4ee3\u7801\uff0c\u8fd9\u91cc\u63a5\u53e3\u4f1a\u81ea\u52a8\u914d\u7f6e\u597d\u3002 \u5982\u679c\u662f\u81ea\u5df1\u5199\u7684\u4e1a\u52a1\u4ee3\u7801\uff0c\u8fd9\u91cc\u9700\u8981\u914d\u7f6e\u597d\u540e\u7aef\u63a5\u53e3\u3002\u8fdb\u5165\u7cfb\u7edf \u8d85\u7ea7\u7ba1\u7406\u5458 \u2192 api\u7ba1\u7406 \u83dc\u5355\uff0c\u70b9\u51fb \u65b0\u589eapi \u6309\u94ae\uff0c\u914d\u7f6e\u63a5\u53e3\u4fe1\u606f\u3002 \u8def\u5f84\uff1a\u5c31\u662f\u63a5\u53e3\u8def\u5f84\uff0c\u6bd4\u5982\u524d\u7aef\u9879\u76ee\u4e2d src \u2192 api \u2192 struct\u7b80\u79f0.js \u6bcf\u4e2a\u65b9\u6cd5\u91cc\u7684 url \u8bf7\u6c42\uff1a\u6839\u636e\u63a5\u53e3\u5b9e\u9645\u9009\u62e9\u5373\u53ef api\u5206\u7ec4\uff1a\u5bf9\u5e94 struct \u7b80\u79f0 api\u7b80\u4ecb\uff1a\u5bf9api\u7684\u7b80\u8981\u8bf4\u660e \u4ee5\u4e0a\u914d\u7f6e\u597d\u540e\uff0c\u70b9\u51fb \u786e\u5b9a \u6309\u94ae\uff0c\u5b8c\u6210\u63a5\u53e3\u914d\u7f6e\u3002 9. \u914d\u7f6e\u89d2\u8272\u6743\u9650 \u8fdb\u5165\u7cfb\u7edf \u8d85\u7ea7\u7ba1\u7406\u5458 \u2192 \u89d2\u8272\u7ba1\u7406 \u83dc\u5355\uff0c\u627e\u5230\u9700\u8981\u8bbe\u7f6e\u6743\u9650\u7684\u89d2\u8272\uff0c\u70b9\u51fb\u5bf9\u5e94\u7684 \u8bbe\u7f6e\u6743\u9650 \u6309\u94ae\uff0c\u914d\u7f6e\u89d2\u8272\u76f8\u5173\u6743\u9650\u3002 \u89d2\u8272\u83dc\u5355\uff1a\u52fe\u9009\u8be5\u89d2\u8272\u53ef\u4ee5\u8bbf\u95ee\u7684\u76ee\u5f55\u83dc\u5355 \u89d2\u8272api\uff1a\u52fe\u9009\u8be5\u89d2\u8272\u53ef\u4ee5\u8bbf\u95ee\u7684\u63a5\u53e3 10 \u5b8c\u5584\u65b0\u589e\u8868\u5355\u5f39\u7a97/\u9875\u9762 \u6211\u4eec\u53ef\u4ee5\u5728\u7cfb\u7edf\u4e2d\u770b\u5230\u6211\u4eec\u6240\u521b\u5efa\u7684\u7ed3\u6784\u4f53\u6570\u636e\u5217\u8868\u9875\u9762\u3002\u76ee\u524d\uff0c\u8fd9\u4e2a\u9875\u9762\u5df2\u7ecf\u662f\u53ef\u4ee5\u5b9e\u73b0 \u5220\u9664 \u3001 \u67e5\u8be2 \u529f\u80fd\u4e86\uff0c \u65b0\u589e \u3001 \u4fee\u6539 \u529f\u80fd\u4ecd\u7136\u9700\u8981\u6211\u4eec\u81ea\u5df1\u5b8c\u5584\u4e00\u4e0b\u5f39\u7a97\u8868\u5355\u3002 \u8fdb\u5165\u7cfb\u7edf \u7cfb\u7edf\u5de5\u5177 \u2192 \u8868\u5355\u751f\u6210\u5668 \u83dc\u5355\uff0c\u6839\u636e\u81ea\u5df1\u7684\u5b9e\u9645\u9700\u6c42\uff0c\u5c06\u5de6\u4fa7\u7ec4\u4ef6\u62d6\u62fd\u81f3\u4e2d\u95f4\u753b\u5e03\u533a\u57df\uff0c\u5e76\u5728\u53f3\u4fa7\u8bbe\u7f6e\u7ec4\u4ef6\u5c5e\u6027\u3002 \u7ec4\u4ef6\u7c7b\u578b\uff1a\u9ed8\u8ba4\u662f\u5de6\u4fa7\u9009\u4e2d\u7684\u7ec4\u4ef6\u7c7b\u578b\uff0c\u8fd9\u91cc\u8fd8\u53ef\u4ee5\u518d\u8fdb\u884c\u8c03\u6574 \u5b57\u6bb5\u540d\uff1a\u5bf9\u5e94 Step3 \u4e2d\u7684 FieldJSON \u5b57\u6bb5 \u6807\u9898\uff1a\u5373\u7ec4\u4ef6label \u5360\u4f4d\u63d0\u793a\uff1a\u3002\u3002\u3002\u5c31\u662f\u5360\u4f4d\u63d0\u793a \u2026\u2026\uff1a \u5269\u4e0b\u7684\u6211\u90fd\u6ca1\u8bd5\uff0c\u6309\u9700\u81ea\u884c\u8bd5\u7528 \u628a\u6240\u6709\u7ec4\u4ef6\u4e0a\u8fb9\u51e0\u4e2a\u57fa\u672c\u7684\u7ec4\u4ef6\u5c5e\u6027\u586b\u597d\u4ee5\u540e\uff0c\u70b9\u51fb\u753b\u5e03\u4e0a\u65b9\u7684 \u590d\u5236\u4ee3\u7801 \u6309\u94ae\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e2a\u5f39\u7a97\uff0c\u8ba9\u6211\u4eec\u9009\u62e9 \u751f\u6210\u7c7b\u578b \u662f \u9875\u9762 \u8fd8\u662f \u5f39\u7a97\u3002\u6211\u7528\u7684\u65f6\u5019\u9009\u7684\u9875\u9762\uff0c\u5177\u4f53\u5185\u5bb9\u5e94\u8be5\u662f\u6ca1\u5dee\u7684\uff0c\u8fd9\u91cc\u9009\u62e9\u54ea\u4e2a\u5e94\u8be5\u4e0d\u5f71\u54cd\u6211\u4eec\u76ee\u524d\u7684\u9700\u6c42\u3002\u7136\u540e\u70b9\u51fb \u786e\u5b9a \u6309\u94ae\uff0c\u5c31\u6210\u529f\u590d\u5236\u5230\u4e86\u6211\u4eec\u7684\u8868\u5355\u4ee3\u7801\u3002 \u63a5\u4e0b\u6765\uff0c \u968f\u4fbf\u627e\u4e2a\u8bb0\u4e8b\u672c\u6216\u8005\u5730\u65b9\uff0c\u628a\u4ee3\u7801\u590d\u5236\u5230\u91cc\u8fb9\u3002 \u5728\u590d\u5236\u51fa\u6765\u7684\u4ee3\u7801\u4e2d\uff0c\u53d6\u51fa <el-form>\u2026\u2026</el-form> \u90e8\u5206\u4ee3\u7801\uff0c\u8986\u76d6\u6389\u524d\u7aef\u9879\u76ee\u4e2d src \u2192 view \u2192 struct \u7b80\u79f0\u6587\u4ef6\u5939\uff08\u81ea\u5efa\uff09 \u2192 struct\u7b80\u79f0.vue \u4e2d \u6b64\u5904\u8bf7\u4f7f\u7528\u8868\u5355\u751f\u6210\u5668\u751f\u6210form\u586b\u5145 \u8868\u5355\u9ed8\u8ba4\u7ed1\u5b9a formData \u5982\u624b\u52a8\u4fee\u6539\u8fc7\u8bf7\u81ea\u884c\u4fee\u6539key \u8fd9\u53e5\u8bdd\u3002 \u5728\u590d\u5236\u51fa\u6765\u7684\u4ee3\u7801\u4e2d\uff0c\u628a js \u90e8\u5206 data \u65b9\u6cd5\u91cc\u8fd4\u56de\u7684\u5bf9\u8c61\u590d\u5236\u5230\u524d\u7aef\u9879\u76ee\u4e2d\uff0c\u4e0a\u8fb9\u63d0\u53ca\u7684 .vue \u6587\u4ef6\u7684 js \u90e8\u5206 data \u65b9\u6cd5\u7684 return \u5bf9\u8c61\u91cc\u3002\uff08 \u8fd9\u91cc\u8868\u8ff0\u6709\u70b9\u4e71\u3002\u3002\u4f46\u662f\u524d\u7aef\u4e00\u770b\u4ee3\u7801\u5c31\u660e\u767d\u4e86\u3002\u3002\u3002\uff09 Finish \u81f3\u6b64\uff0c\u4e00\u4e2a\u5355\u8868\u57fa\u672c\u4e1a\u52a1\u7ed3\u6784\u4f53\u7684\u6570\u636e\u5217\u8868\u663e\u793a\uff0c\u5355\u8868\u6570\u636e\u589e\u52a0\u3001\u5220\u9664\u3001\u67e5\u627e\u3001\u66f4\u65b0\u529f\u80fd\u5168\u90e8\u641e\u5b9a\u3002","title":"\u5c0f\u767d\u8bf4\u660e\u4e66"},{"location":"Manual/#gfva","text":"","title":"GFVA\u5c0f\u767d\u8bf4\u660e\u4e66"},{"location":"Manual/#1","text":"","title":"1. \u76ee\u5f55\u7ed3\u6784"},{"location":"Manual/#2","text":"\u672c\u9879\u76ee\u7684\u7f16\u7a0b\u73af\u5883 \u63a8\u8350 \u5f00\u53d1\u73af\u5883(\u6307\u7684\u662f\u5f00\u53d1\u6b64\u9879\u76ee\u7684\u5f00\u53d1\u73af\u5883) Golang 1.11 1.14.4 MySQL 8.0 8.0.19 nodejs \u6700\u65b0\u7684LTS 12.16.1","title":"2. \u5b9e\u6218\u57fa\u7840\u64cd\u4f5c"},{"location":"Manual/#21","text":"git clone https://github.com/flipped-aurora/gf-vue-admin.git","title":"2.1 \u4e0b\u8f7d\u6216\u514b\u9686\u9879\u76ee"},{"location":"Manual/#22","text":"","title":"2.2 \u5b89\u88c5\u4f9d\u8d56"},{"location":"Manual/#221","text":"// \u8fdb\u5165web\u6587\u4ef6\u5939 cd web // \u4f7f\u7528npm\u6216\u8005cnpm\u8fdb\u884c\u4e0b\u8f7d\u4f9d\u8d56 cnpm i || npm i","title":"2.2.1 \u524d\u7aef\u9879\u76ee\u4e0b\u8f7d\u4f9d\u8d56"},{"location":"Manual/#222","text":"# \u6ce8\u610f\u4e0d\u8981\u4f7f\u7528gopm # \u5f00\u542fgo module go env -w GO111MODULE=on # \u8bbe\u7f6e\u4ee3\u7406 go env -w GOPROXY=https://goproxy.io,direct","title":"2.2.2 \u540e\u7aef\u9879\u76ee\u4e0b\u8f7d\u4f9d\u8d56"},{"location":"Manual/#23","text":"","title":"2.3 \u521d\u59cb\u5316"},{"location":"Manual/#231","text":"\u65b0\u5efa\u6570\u636e\u5e93,\u540d\u5b57\u81ea\u53d6. \u5c06server/document/gf-vue-admin.sql\u5bfc\u5165\u5230\u65b0\u5efa\u7684\u6570\u636e\u5e93","title":"2.3.1 \u6570\u636e\u5e93\u521d\u59cb\u5316\u6570\u636e"},{"location":"Manual/#232-server","text":"\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8eserver/config \u6309\u9700\u4fee\u6539config.toml\u6587\u4ef6 \u5982\u9700\u8be6\u7ec6\u7684\u914d\u7f6e\u6587\u4ef6, \u70b9\u6211","title":"2.3.2 server\u7684\u914d\u7f6e\u6587\u4ef6"},{"location":"Manual/#3","text":"\u524d\u7aef\u662fVue\u9879\u76ee \u4f7f\u7528VsCode\u6216\u8005WebStorm\u6253\u5f00web\u6587\u4ef6\u5939 \u4f7f\u7528 npm run serve \u6216\u8005 cnpm run serve \u5373\u53ef\u542f\u52a8\u9879\u76ee","title":"3.\u524d\u7aef\u9879\u76ee"},{"location":"Manual/#4","text":"\u540e\u7aef\u662fGolang\u9879\u76ee \u4f7f\u7528VsCode(\u9700\u8981\u81ea\u884c\u4e0b\u8f7dVsCode\u7684go\u5f00\u53d1\u63d2\u4ef6)\u6216\u8005Goland\u6253\u5f00server\u6587\u4ef6\u5939, \u4ee5Goland\u4e3a\u4f8b\u8fdb\u884c\u8bf4\u660e \u8fdb\u5165GoLand\u7684File \u2192 settings \u2192 Go \u2192 Go Modules\uff0c\u5c06 Environment \u9879\u7684\u503c\u8bbe\u7f6e\u4e3a GOPROXY=https://goproxy.io,direct \u6253\u5f00server/go.mod\u6587\u4ef6,\u5728\u6587\u4ef6\u7a7a\u767d\u5904\u9f20\u6807\u53f3\u952e\u70b9\u51fb Go Mod Tidy \u5b8c\u6210\u540e\u6253\u5f00server/main.go, \u5728\u6587\u4ef6\u7a7a\u767d\u5904\u9f20\u6807\u53f3\u952e\u70b9\u51fb \u8fd0\u884c'go build main.go' ,\u6216\u8005\u4f7f\u7528\u56fe\u4e2d\u7ea2\u8272\u6846\u7684\u53f3\u8fb9\u7684\u5feb\u6377\u952e\u7ec4\u5408\u8fdb\u884c\u542f\u52a8\u9879\u76ee","title":"4.\u540e\u7aef\u9879\u76ee"},{"location":"Manual/#5","text":"\u70b9\u51fb\u5de6\u4fa7\u83dc\u5355\u4e2d\u7684 \u7cfb\u7edf\u5de5\u5177 > \u4ee3\u7801\u751f\u6210\u5668 ,\u4ee3\u7801\u751f\u6210\u5668\u662f\u7528\u6765\u751f\u6210CURD\u4ee3\u7801\u7684\u3002 \u70b9\u51fb \u70b9\u8fd9\u91cc\u4ece\u73b0\u6709\u6570\u636e\u5e93\u521b\u5efa\u4ee3\u7801 \u9009\u62e9 \u6570\u636e\u5e93\u540d \u4ee5\u53ca \u8868\u540d \u70b9\u51fb \u4f7f\u7528\u6b64\u8868\u521b\u5efa \u81ea\u884c\u7f16\u8f91\u597d\u5404\u4e2a Filed \u7684\u6240\u9700\u7684\u641c\u7d22\u6761\u4ef6,\u6216\u8005\u5176\u4ed6\u81ea\u5df1\u8981\u4fee\u6539\u7684\u5730\u65b9, \u4fee\u6539\u540e\u70b9\u51fb\u751f\u6210\u4ee3\u7801 \u70b9\u51fb\u540e\u5c31\u53ef\u4ee5\u770b\u5230\u5de6\u4e0b\u89d2\u6216\u8005\u4e0b\u8f7d\u5185\u5bb9\u91cc\u6709\u4e00\u4e2a\u4e0b\u8f7d\u597d\u4e86\u7684gf-vue-admin.zip\u6587\u4ef6 \u89e3\u538bgf-vue-admin.zip\u540e\u4f1a\u770b\u5230\u91cc\u9762\u6709\u4e2a autoCode \u6587\u4ef6\u5939\uff0cautoCode \u91cc\u7684 te \u6587\u4ef6\u5939\u4e3a\u81ea\u52a8\u751f\u6210\u7684\u540e\u7aef\u4ee3\u7801\uff0cfe\u6587\u4ef6\u5939\u4e3a\u81ea\u52a8\u751f\u6210\u7684\u524d\u7aef\u4ee3\u7801\u3002 te\u6587\u4ef6\u5939 \u2192 \u540e\u7aef\u4ee3\u7801\uff1a api \u4e0b\u7684 .go \u6587\u4ef6\u653e\u5230 server/app/api/v1 \u4e0b\u3002 user(\u8fd9\u4e2a\u6587\u4ef6\u5939\u662f\u52a8\u6001\u7684,\u5177\u4f53\u7684\u662fPackageName(\u6587\u4ef6\u540d\u79f0)\u8fd9\u4e2a\u5b57\u6bb5) \u4e0b\u7684 \u6574\u4e2a\u6587\u4ef6\u5939 \u653e\u5230server/app/model \u4e0b\u3002 request \u4e0b\u7684 .go \u6587\u4ef6\u653e\u5230\u540e\u7aef\u9879\u76ee\u4e2d\u7684 server/app/api/request\u4e0b\u3002 router \u4e0b\u7684 .go \u6587\u4ef6\u653e\u5230\u540e\u7aef\u9879\u76ee\u4e2d\u7684 server/router \u4e0b\u3002 service \u4e0b\u7684 .go \u6587\u4ef6\u653e\u5230\u540e\u7aef\u9879\u76ee\u4e2d\u7684 server/app/service \u4e0b\u3002 fe\u6587\u4ef6\u5939 \u2192 \u524d\u7aef\u4ee3\u7801\uff1a api \u4e0b\u7684 .js \u6587\u4ef6\u653e\u5230 web/src/api \u4e0b\u3002 table \u4e0b\u7684 .vue \u6587\u4ef6\u653e\u5230\u524d\u7aef\u9879\u76ee\u4e2d\u7684 web/src/api/view/ (PackageName(\u6587\u4ef6\u540d\u79f0)\u81ea\u5efa) \u4e0b\u3002","title":"5.\u81ea\u52a8\u4ee3\u7801\u751f\u6210(\u6570\u636e\u5e93\u8868)"},{"location":"Manual/#6","text":"\u6253\u5f00 server/router/router.go \u6587\u4ef6,\u5728InitializeRouters\u65b9\u6cd5\u4e2d,\u81ea\u884c\u8c03\u7528\u751f\u6210autoCode/te/router\u7684 .go \u6587\u4ef6\u7684\u65b9\u6cd5","title":"6. \u6ce8\u518c\u8def\u7531"},{"location":"Manual/#7","text":"\u8fdb\u5165\u7cfb\u7edf \u8d85\u7ea7\u7ba1\u7406\u5458 \u2192 \u83dc\u5355\u7ba1\u7406 \u83dc\u5355\uff0c\u70b9\u51fb \u65b0\u589e\u6839\u83dc\u5355 \u6309\u94ae\uff0c\u914d\u7f6e\u83dc\u5355\u4fe1\u606f\u3002 \u8def\u7531name\uff1a\u5bf9\u5e94\u8fdb\u5165\u5217\u8868\u663e\u793a\u9875\u9762\u65f6\u7684\u8bbf\u95ee\u8def\u5f84 \u8def\u7531path\uff1a\u9009\u4e2d\u540e\u8fb9\u7684\u201c\u6dfb\u52a0\u53c2\u6570\u201d\u540e\u624d\u53ef\u4ee5\u8f93\u5165\uff0c\u5bf9\u5e94\u8fdb\u5165\u5217\u8868\u663e\u793a\u9875\u9762\u65f6\u8bbf\u95ee\u8def\u5f84\u540e\u7684\u53c2\u6570 \uff08\u6ca1\u7528\u8fc7\uff0c\u76ee\u6d4b\u662f\u9171\u5a76\u7684\uff09 \u662f\u5426\u9690\u85cf\uff1a\u662f\u5426\u5728\u7cfb\u7edf\u5de6\u4fa7\u76ee\u5f55\u83dc\u5355\u663e\u793a\u65f6\uff0c\u9690\u85cf\u6389\u8be5\u76ee\u5f55\u83dc\u5355 \u7236\u8282\u70b9Id\uff1a\u8be5\u76ee\u5f55\u83dc\u5355\u7684\u7236\u7ea7\u76ee\u5f55\u83dc\u5355\u3002\u8fd9\u91cc\u662f\u81ea\u52a8\u586b\u5145\u7684\u6570\u636e\uff0c\u4e0d\u9700\u8981\u81ea\u5df1\u64cd\u4f5c \u6587\u4ef6\u8def\u5f84\uff1a\u5bf9\u5e94\u524d\u7aef\u9879\u76ee\u4e2d /view/struct\u7b80\u79f0\u6587\u4ef6\u5939\uff08\u81ea\u5efa\uff09/struct\u7b80\u79f0.vue \u6587\u4ef6 \u5c55\u793a\u540d\u79f0\uff1a\u8be5\u76ee\u5f55\u83dc\u5355\u663e\u793a\u5728\u7cfb\u7edf\u5de6\u4fa7\u76ee\u5f55\u83dc\u5355\u4e2d\u7684\u540d\u79f0 \u56fe\u6807\uff1a\u8be5\u76ee\u5f55\u83dc\u5355\u663e\u793a\u5728\u7cfb\u7edf\u5de6\u4fa7\u76ee\u5f55\u83dc\u5355\u4e2d\u7684\u56fe\u6807 \u6392\u5e8f\u6807\u8bb0\uff1a\u7528\u4e8e\u8c03\u6574\u8be5\u76ee\u5f55\u83dc\u5355\u5728\u7cfb\u7edf\u5de6\u4fa7\u76ee\u5f55\u83dc\u5355\u4e2d\u663e\u793a\u7684\u4e0a\u4e0b\u4f4d\u7f6e \uff08\u6211\u731c\u7684\uff09 keepAlive\uff1a\u662f\u5426\u4f7f\u7528keepAlive\u7f13\u5b58 \uff08\u592a\u83dc\u4e86\uff0c\u867d\u7136\u77e5\u9053\u5e72\u561b\u7528\u4f46\u662f\u51e0\u884c\u5b57\u89e3\u91ca\u4e0d\u4e86\uff0c\u5982\u6709\u9700\u8981\uff0c\u8bf7\u81ea\u884c\u767e\u5ea6\uff09 \u4ee5\u4e0a\u914d\u7f6e\u597d\u540e\uff0c\u70b9\u51fb \u786e\u5b9a \u6309\u94ae\uff0c\u5b8c\u6210\u83dc\u5355\u914d\u7f6e\u3002","title":"7. \u914d\u7f6e\u76ee\u5f55\u83dc\u5355"},{"location":"Manual/#8","text":"\u5982\u679c\u662f\u81ea\u52a8\u751f\u6210\u7684\u4ee3\u7801\uff0c\u8fd9\u91cc\u63a5\u53e3\u4f1a\u81ea\u52a8\u914d\u7f6e\u597d\u3002 \u5982\u679c\u662f\u81ea\u5df1\u5199\u7684\u4e1a\u52a1\u4ee3\u7801\uff0c\u8fd9\u91cc\u9700\u8981\u914d\u7f6e\u597d\u540e\u7aef\u63a5\u53e3\u3002\u8fdb\u5165\u7cfb\u7edf \u8d85\u7ea7\u7ba1\u7406\u5458 \u2192 api\u7ba1\u7406 \u83dc\u5355\uff0c\u70b9\u51fb \u65b0\u589eapi \u6309\u94ae\uff0c\u914d\u7f6e\u63a5\u53e3\u4fe1\u606f\u3002 \u8def\u5f84\uff1a\u5c31\u662f\u63a5\u53e3\u8def\u5f84\uff0c\u6bd4\u5982\u524d\u7aef\u9879\u76ee\u4e2d src \u2192 api \u2192 struct\u7b80\u79f0.js \u6bcf\u4e2a\u65b9\u6cd5\u91cc\u7684 url \u8bf7\u6c42\uff1a\u6839\u636e\u63a5\u53e3\u5b9e\u9645\u9009\u62e9\u5373\u53ef api\u5206\u7ec4\uff1a\u5bf9\u5e94 struct \u7b80\u79f0 api\u7b80\u4ecb\uff1a\u5bf9api\u7684\u7b80\u8981\u8bf4\u660e \u4ee5\u4e0a\u914d\u7f6e\u597d\u540e\uff0c\u70b9\u51fb \u786e\u5b9a \u6309\u94ae\uff0c\u5b8c\u6210\u63a5\u53e3\u914d\u7f6e\u3002","title":"8. \u914d\u7f6e\u540e\u7aef\u63a5\u53e3"},{"location":"Manual/#9","text":"\u8fdb\u5165\u7cfb\u7edf \u8d85\u7ea7\u7ba1\u7406\u5458 \u2192 \u89d2\u8272\u7ba1\u7406 \u83dc\u5355\uff0c\u627e\u5230\u9700\u8981\u8bbe\u7f6e\u6743\u9650\u7684\u89d2\u8272\uff0c\u70b9\u51fb\u5bf9\u5e94\u7684 \u8bbe\u7f6e\u6743\u9650 \u6309\u94ae\uff0c\u914d\u7f6e\u89d2\u8272\u76f8\u5173\u6743\u9650\u3002 \u89d2\u8272\u83dc\u5355\uff1a\u52fe\u9009\u8be5\u89d2\u8272\u53ef\u4ee5\u8bbf\u95ee\u7684\u76ee\u5f55\u83dc\u5355 \u89d2\u8272api\uff1a\u52fe\u9009\u8be5\u89d2\u8272\u53ef\u4ee5\u8bbf\u95ee\u7684\u63a5\u53e3","title":"9. \u914d\u7f6e\u89d2\u8272\u6743\u9650"},{"location":"Manual/#10","text":"\u6211\u4eec\u53ef\u4ee5\u5728\u7cfb\u7edf\u4e2d\u770b\u5230\u6211\u4eec\u6240\u521b\u5efa\u7684\u7ed3\u6784\u4f53\u6570\u636e\u5217\u8868\u9875\u9762\u3002\u76ee\u524d\uff0c\u8fd9\u4e2a\u9875\u9762\u5df2\u7ecf\u662f\u53ef\u4ee5\u5b9e\u73b0 \u5220\u9664 \u3001 \u67e5\u8be2 \u529f\u80fd\u4e86\uff0c \u65b0\u589e \u3001 \u4fee\u6539 \u529f\u80fd\u4ecd\u7136\u9700\u8981\u6211\u4eec\u81ea\u5df1\u5b8c\u5584\u4e00\u4e0b\u5f39\u7a97\u8868\u5355\u3002 \u8fdb\u5165\u7cfb\u7edf \u7cfb\u7edf\u5de5\u5177 \u2192 \u8868\u5355\u751f\u6210\u5668 \u83dc\u5355\uff0c\u6839\u636e\u81ea\u5df1\u7684\u5b9e\u9645\u9700\u6c42\uff0c\u5c06\u5de6\u4fa7\u7ec4\u4ef6\u62d6\u62fd\u81f3\u4e2d\u95f4\u753b\u5e03\u533a\u57df\uff0c\u5e76\u5728\u53f3\u4fa7\u8bbe\u7f6e\u7ec4\u4ef6\u5c5e\u6027\u3002 \u7ec4\u4ef6\u7c7b\u578b\uff1a\u9ed8\u8ba4\u662f\u5de6\u4fa7\u9009\u4e2d\u7684\u7ec4\u4ef6\u7c7b\u578b\uff0c\u8fd9\u91cc\u8fd8\u53ef\u4ee5\u518d\u8fdb\u884c\u8c03\u6574 \u5b57\u6bb5\u540d\uff1a\u5bf9\u5e94 Step3 \u4e2d\u7684 FieldJSON \u5b57\u6bb5 \u6807\u9898\uff1a\u5373\u7ec4\u4ef6label \u5360\u4f4d\u63d0\u793a\uff1a\u3002\u3002\u3002\u5c31\u662f\u5360\u4f4d\u63d0\u793a \u2026\u2026\uff1a \u5269\u4e0b\u7684\u6211\u90fd\u6ca1\u8bd5\uff0c\u6309\u9700\u81ea\u884c\u8bd5\u7528 \u628a\u6240\u6709\u7ec4\u4ef6\u4e0a\u8fb9\u51e0\u4e2a\u57fa\u672c\u7684\u7ec4\u4ef6\u5c5e\u6027\u586b\u597d\u4ee5\u540e\uff0c\u70b9\u51fb\u753b\u5e03\u4e0a\u65b9\u7684 \u590d\u5236\u4ee3\u7801 \u6309\u94ae\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e2a\u5f39\u7a97\uff0c\u8ba9\u6211\u4eec\u9009\u62e9 \u751f\u6210\u7c7b\u578b \u662f \u9875\u9762 \u8fd8\u662f \u5f39\u7a97\u3002\u6211\u7528\u7684\u65f6\u5019\u9009\u7684\u9875\u9762\uff0c\u5177\u4f53\u5185\u5bb9\u5e94\u8be5\u662f\u6ca1\u5dee\u7684\uff0c\u8fd9\u91cc\u9009\u62e9\u54ea\u4e2a\u5e94\u8be5\u4e0d\u5f71\u54cd\u6211\u4eec\u76ee\u524d\u7684\u9700\u6c42\u3002\u7136\u540e\u70b9\u51fb \u786e\u5b9a \u6309\u94ae\uff0c\u5c31\u6210\u529f\u590d\u5236\u5230\u4e86\u6211\u4eec\u7684\u8868\u5355\u4ee3\u7801\u3002 \u63a5\u4e0b\u6765\uff0c \u968f\u4fbf\u627e\u4e2a\u8bb0\u4e8b\u672c\u6216\u8005\u5730\u65b9\uff0c\u628a\u4ee3\u7801\u590d\u5236\u5230\u91cc\u8fb9\u3002 \u5728\u590d\u5236\u51fa\u6765\u7684\u4ee3\u7801\u4e2d\uff0c\u53d6\u51fa <el-form>\u2026\u2026</el-form> \u90e8\u5206\u4ee3\u7801\uff0c\u8986\u76d6\u6389\u524d\u7aef\u9879\u76ee\u4e2d src \u2192 view \u2192 struct \u7b80\u79f0\u6587\u4ef6\u5939\uff08\u81ea\u5efa\uff09 \u2192 struct\u7b80\u79f0.vue \u4e2d \u6b64\u5904\u8bf7\u4f7f\u7528\u8868\u5355\u751f\u6210\u5668\u751f\u6210form\u586b\u5145 \u8868\u5355\u9ed8\u8ba4\u7ed1\u5b9a formData \u5982\u624b\u52a8\u4fee\u6539\u8fc7\u8bf7\u81ea\u884c\u4fee\u6539key \u8fd9\u53e5\u8bdd\u3002 \u5728\u590d\u5236\u51fa\u6765\u7684\u4ee3\u7801\u4e2d\uff0c\u628a js \u90e8\u5206 data \u65b9\u6cd5\u91cc\u8fd4\u56de\u7684\u5bf9\u8c61\u590d\u5236\u5230\u524d\u7aef\u9879\u76ee\u4e2d\uff0c\u4e0a\u8fb9\u63d0\u53ca\u7684 .vue \u6587\u4ef6\u7684 js \u90e8\u5206 data \u65b9\u6cd5\u7684 return \u5bf9\u8c61\u91cc\u3002\uff08 \u8fd9\u91cc\u8868\u8ff0\u6709\u70b9\u4e71\u3002\u3002\u4f46\u662f\u524d\u7aef\u4e00\u770b\u4ee3\u7801\u5c31\u660e\u767d\u4e86\u3002\u3002\u3002\uff09","title":"10 \u5b8c\u5584\u65b0\u589e\u8868\u5355\u5f39\u7a97/\u9875\u9762"},{"location":"Manual/#finish","text":"\u81f3\u6b64\uff0c\u4e00\u4e2a\u5355\u8868\u57fa\u672c\u4e1a\u52a1\u7ed3\u6784\u4f53\u7684\u6570\u636e\u5217\u8868\u663e\u793a\uff0c\u5355\u8868\u6570\u636e\u589e\u52a0\u3001\u5220\u9664\u3001\u67e5\u627e\u3001\u66f4\u65b0\u529f\u80fd\u5168\u90e8\u641e\u5b9a\u3002","title":"Finish"},{"location":"Manual/config/","text":"2. \u914d\u7f6e\u6587\u4ef6\u8be6\u89e3(config.toml) 2.1 [server] \u914d\u7f6e\u5206\u7c7b \u914d\u7f6e\u540d \u914d\u7f6e\u7c7b\u578b \u82f1\u6587\u63cf\u8ff0 \u4e2d\u6587\u63cf\u8ff0 \u94fe\u63a5 Basic Address string Address specifies the server listening address like \"port\" or \":port\",multiple addresses joined using ','. \u5730\u5740\u6307\u5b9a\u670d\u52a1\u5668\u7684\u4fa6\u542c\u5730\u5740\uff0c\u4f8b\u5982\u201c port\u201d\u6216\u201c\uff1aport\u201d\uff0c\u4f7f\u7528'\uff0c'\u8fde\u63a5\u591a\u4e2a\u5730\u5740 Basic HTTPSAddr string HTTPSAddr specifies the HTTPS addresses, multiple addresses joined using char ','. HTTPSAddr\u6307\u5b9aHTTPS\u5730\u5740\uff0c\u5373\u4f7f\u7528','\u8fde\u63a5\u7684\u591a\u4e2a\u5730\u5740 Basic HTTPSCertPath string HTTPSCertPath specifies certification file path for HTTPS service. HTTPSCertPath\u6307\u5b9aHTTPS\u670d\u52a1\u7684\u8ba4\u8bc1\u6587\u4ef6\u8def\u5f84 Basic HTTPSKeyPath string HTTPSKeyPath specifies the key file path for HTTPS service. HTTPSKeyPath\u6307\u5b9aHTTPS\u670d\u52a1\u7684\u5bc6\u94a5\u6587\u4ef6\u8def\u5f84 Basic ServerAgent string specifies the server agent information, which is wrote to Http response header as \"Server\" ServerAgent\u6307\u5b9a\u670d\u52a1\u5668\u4ee3\u7406\u4fe1\u606f\uff0c\u8be5\u4fe1\u606f\u5c06\u5199\u5165\uff0cHTTP\u54cd\u5e94\u6807\u5934\u4e3a\u201c\u670d\u52a1\u5668\u201d Basic TLSConfig *tls.Config TLSConfig optionally provides a TLS configuration for use by ServeTLS and ListenAndServeTLS. Note that this value is cloned by ServeTLS and ListenAndServeTLS, so it's not possible to modify the configuration with methods like tls.Config.SetSessionTicketKeys. To use SetSessionTicketKeys, use Server.Serve with a TLS Listener instead. \uff08\u53ef\u9009\uff09\u63d0\u4f9b\u7531ServeTLS\u548cListenAndServeTLS\u4f7f\u7528\u7684TLS\u914d\u7f6e\u8bf7\u6ce8\u610f\uff0c\u6b64\u503c\u662f\u7531ServeTLS\u548cListenAndServeTLS\u514b\u9686\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u4f7f\u7528tls.Config.SetSessionTicketKeys\u4e4b\u7c7b\u7684\u65b9\u6cd5\u4fee\u6539\u914d\u7f6e\u3002\u82e5\u8981\u4f7f\u7528SetSessionTicketKeys\uff0c\u8bf7\u6539\u4e3a\u5c06Server.Serve\u4e0eTLS\u4fa6\u542c\u5668\u4e00\u8d77\u4f7f\u7528 Basic Handler http.Handler Handler the handler for HTTP request. \u5904\u7406\u7a0b\u5e8fHTTP\u8bf7\u6c42\u7684\u5904\u7406\u7a0b\u5e8f Basic ReadTimeout time.Duration ReadTimeout is the maximum duration for reading the entire request, including the body. Because ReadTimeout does not let Handlers make per-request decisions on each request body's acceptable deadline or upload rate, most users will prefer to use ReadHeaderTimeout. It is valid to use them both. ReadTimeout\u662f\u8bfb\u53d6\u6574\u4e2a\u8bf7\u6c42\uff08\u5305\u62ec\u6b63\u6587\uff09\u7684\u6700\u5927\u6301\u7eed\u65f6\u95f4\u3002\u7531\u4e8eReadTimeout\u4e0d\u5141\u8bb8\u5904\u7406\u7a0b\u5e8f\u6839\u636e\u6bcf\u4e2a\u8bf7\u6c42\u6b63\u6587\u7684\u53ef\u63a5\u53d7\u7684\u622a\u6b62\u65e5\u671f\u6216\u4e0a\u8f7d\u901f\u7387\u505a\u51fa\u6bcf\u4e2a\u8bf7\u6c42\u7684\u51b3\u5b9a\uff0c\u56e0\u6b64\u5927\u591a\u6570\u7528\u6237\u5c06\u66f4\u559c\u6b22\u4f7f\u7528ReadHeaderTimeout\u3002\u540c\u65f6\u4f7f\u7528\u5b83\u4eec\u662f\u6709\u6548\u7684 Basic WriteTimeout time.Duration WriteTimeout is the maximum duration before timing out writes of the response. It is reset whenever a new request's header is read. Like ReadTimeout, it does not let Handlers make decisions on a per-request basis. WriteTimeout\u662f\u8d85\u65f6\u5199\u5165\u54cd\u5e94\u4e4b\u524d\u7684\u6700\u5927\u6301\u7eed\u65f6\u95f4\u3002\u6bcf\u5f53\u8bfb\u53d6\u65b0\u8bf7\u6c42\u7684\u6807\u5934\u65f6\uff0c\u90fd\u4f1a\u5c06\u5176\u91cd\u7f6e\u3002\u4e0eReadTimeout\u4e00\u6837\uff0c\u5b83\u4e5f\u4e0d\u5141\u8bb8\u5904\u7406\u7a0b\u5e8f\u6839\u636e\u6bcf\u4e2a\u8bf7\u6c42\u505a\u51fa\u51b3\u7b56 Basic IdleTimeout time.Duration IdleTimeout is the maximum amount of time to wait for the next request when keep-alives are enabled. If IdleTimeout is zero, the value of ReadTimeout is used. If both are zero, there is no timeout. IdleTimeout\u662f\u542f\u7528\u4fdd\u6301\u6d3b\u52a8\u72b6\u6001\u540e\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u7684\u6700\u957f\u65f6\u95f4\u3002\u5982\u679cIdleTimeout\u4e3a\u96f6\uff0c\u5219\u4f7f\u7528ReadTimeout\u7684\u503c\u3002\u5982\u679c\u4e24\u8005\u5747\u4e3a\u96f6\uff0c\u5219\u6ca1\u6709\u8d85\u65f6 Basic MaxHeaderBytes int MaxHeaderBytes controls the maximum number of bytes the server will read parsing the request header's keys and values, including the request line. It does not limit the size of the request body. It can be configured in configuration file using string like: 1m, 10m, 500kb etc. It's 1024 bytes in default. MaxHeaderBytes\u63a7\u5236\u670d\u52a1\u5668\u8bfb\u53d6\u7684\u6700\u5927\u5b57\u8282\u6570\uff0c\u4ee5\u89e3\u6790\u8bf7\u6c42\u6807\u5934\u7684\u952e\u548c\u503c\uff08\u5305\u62ec\u8bf7\u6c42\u884c\uff09\u3002\u5b83\u4e0d\u9650\u5236\u8bf7\u6c42\u4e3b\u4f53\u7684\u5927\u5c0f\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5b57\u7b26\u4e32\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5bf9\u5176\u8fdb\u884c\u914d\u7f6e\uff1a1m\uff0c10m\uff0c500kb\u7b49\u3002\u9ed8\u8ba4\u503c\u4e3a1024\u5b57\u8282 Basic ServerAgent string ServerAgent specifies the server agent information, which is wrote to HTTP response header as \"Server\" ServerAgent\u6307\u5b9a\u670d\u52a1\u5668\u4ee3\u7406\u4fe1\u606f\uff0c\u8be5\u4fe1\u606f\u4f5c\u4e3a\u201c\u670d\u52a1\u5668\u201d\u5199\u5165HTTP\u54cd\u5e94\u6807\u5934 Basic View *gview.View View specifies the default template view object for the server. \u89c6\u56fe\u6307\u5b9a\u670d\u52a1\u5668\u7684\u9ed8\u8ba4\u6a21\u677f\u89c6\u56fe\u5bf9\u8c61 Static Rewrites map[string]string Rewrites specifies the URI rewrite rules map. \u91cd\u5199\u6307\u5b9aURI\u91cd\u5199\u89c4\u5219\u6620\u5c04 Static IndexFiles []string IndexFiles specifies the index files for static folder. \u6307\u5b9a\u9759\u6001\u6587\u4ef6\u5939\u7684\u7d22\u5f15\u6587\u4ef6 \u70b9\u6211 Static IndexFolder bool IndexFolder specifies if listing sub-files when requesting folder.The server responses HTTP status code 403 if it is false. \u6307\u5b9a\u5728\u8bf7\u6c42\u6587\u4ef6\u5939\u65f6\u662f\u5426\u5217\u51fa\u5b50\u6587\u4ef6\u3002\u670d\u52a1\u5668\u8fd4\u56deHTTP\u72b6\u6001\u7801403\uff08\u5982\u679c\u4e3afalse\uff09 Static ServerRoot string specifies the root directory for static service \u6307\u5b9a\u9759\u6001\u670d\u52a1\u7684\u6839\u76ee\u5f55,\u7528\u6765\u8bbe\u7f6eServer\u7684\u4e3b\u76ee\u5f55\uff08\u7c7b\u4f3cnginx\u4e2d\u7684root\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff09 Static SearchPaths []string SearchPaths specifies additional searching directories for static service. \u6307\u5b9a\u7528\u4e8e\u9759\u6001\u670d\u52a1\u7684\u5176\u4ed6\u641c\u7d22\u76ee\u5f55 Static StaticPaths []staticPathItem StaticPaths specifies URI to directory mapping array. \u6307\u5b9aURI\u5230\u76ee\u5f55\u7684\u6620\u5c04\u6570\u7ec4 Static FileServerEnabled bool FileServerEnabled is the global switch for static service.It is automatically set enabled if any static path is set. \u9759\u6001\u670d\u52a1\u7684\u5168\u5c40\u5f00\u5173\u3002\u5982\u679c\u8bbe\u7f6e\u4e86\u4efb\u4f55\u9759\u6001\u8def\u5f84\uff0c\u5b83\u5c06\u81ea\u52a8\u8bbe\u7f6e\u4e3a\u542f\u7528 Cookie CookieMaxAge time.Duration CookieMaxAge specifies the max TTL for cookie items. \u6307\u5b9aCookie\u9879\u76ee\u7684\u6700\u5927TTL Cookie CookiePath string CookiePath specifies cookie path.It also affects the default storage for session id. \u6307\u5b9acookie\u8def\u5f84\uff0c\u5b83\u4e5f\u4f1a\u5f71\u54cd\u4f1a\u8bddID\u7684\u9ed8\u8ba4\u5b58\u50a8 Cookie CookieDomain string CookieDomain specifies cookie domain.It also affects the default storage for session id. \u6307\u5b9acookie\u57df\uff0c\u8fd8\u4f1a\u5f71\u54cd\u4f1a\u8bddID\u7684\u9ed8\u8ba4\u5b58\u50a8 Session SessionMaxAge time.Duration specifies max TTL for session items. \u6307\u5b9a\u4f1a\u8bdd\u9879\u76ee\u7684\u6700\u5927TTL Session SessionIdName string specifies the session id name. \u6307\u5b9a\u4f1a\u8bddID\u540d\u79f0,SessionId\u7684\u8bc6\u522b\u540d\u79f0 Session SessionPath string specifies the session storage directory path for storing session files,It only makes sense if the session storage is type of file storage. \u6307\u5b9a\u7528\u4e8e\u5b58\u50a8\u4f1a\u8bdd\u6587\u4ef6\u7684\u4f1a\u8bdd\u5b58\u50a8\u76ee\u5f55\u8def\u5f84\u3002\u4ec5\u5f53\u4f1a\u8bdd\u5b58\u50a8\u4e3a\u6587\u4ef6\u5b58\u50a8\u7c7b\u578b\u65f6\u624d\u6709\u610f\u4e49 Session SessionStorage gsession.Storage SessionStorage specifies the session storage SessionStorage\u6307\u5b9a\u4f1a\u8bdd\u5b58\u50a8 Logging Logger *glog.Logger Logger specifies the logger for server. \u8bb0\u5f55\u5668\u6307\u5b9a\u670d\u52a1\u5668\u7684\u8bb0\u5f55\u5668 Logging LogPath string LogPath specifies the directory for storing logging files. \u6307\u5b9a\u7528\u4e8e\u5b58\u50a8\u65e5\u5fd7\u6587\u4ef6\u7684\u76ee\u5f55 Logging LogStdout bool LogStdout specifies whether printing logging content to stdout. LogStdout\u6307\u5b9a\u662f\u5426\u5c06\u65e5\u5fd7\u8bb0\u5f55\u5185\u5bb9\u6253\u5370\u5230stdout Logging ErrorStack bool ErrorStack specifies whether logging stack information when error. ErrorStack\u6307\u5b9a\u662f\u5426\u5728\u53d1\u751f\u9519\u8bef\u65f6\u8bb0\u5f55\u5806\u6808\u4fe1\u606f Logging ErrorLogEnabled bool enables error logging content to files. \u542f\u7528\u9519\u8bef\u65e5\u5fd7\u8bb0\u5f55\u6587\u4ef6 \u70b9\u6211 Logging AccessLogEnabled bool enables access logging content to files. \u542f\u7528\u8bbf\u95ee\u65e5\u5fd7\u8bb0\u5f55\u5185\u5bb9\u5230\u6587\u4ef6 \u70b9\u6211 Logging AccessLogPattern string AccessLogPattern specifies the error log file pattern like: access-{Ymd}.log AccessLogPattern\u6307\u5b9a\u9519\u8bef\u65e5\u5fd7\u6587\u4ef6\u6a21\u5f0f\uff0c\u4f8b\u5982\uff1aaccess- {Ymd} .log PProf PProfEnabled bool enables PProf feature. \u542f\u7528PProf\u529f\u80fd \u70b9\u6211 PProf PProfPattern string PProfPattern specifies the PProf service pattern for router. \u6307\u5b9a\u8def\u7531\u5668\u7684PProf\u670d\u52a1\u6a21\u5f0f Other ClientMaxBodySize int64 ClientMaxBodySize specifies the max body size limit in bytes for client request. It can be configured in configuration file using string like: 1m, 10m, 500kb etc. It's 8MB in default. ClientMaxBodySize\u6307\u5b9a\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u6700\u5927\u4e3b\u4f53\u5927\u5c0f\u9650\u5236\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5b57\u7b26\u4e32\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u914d\u7f6e\uff1a1m\uff0c10m\uff0c500kb\u7b49\u3002\u9ed8\u8ba4\u4e3a8MB\u3002 Other FormParsingMemory int64 FormParsingMemory specifies max memory buffer size in bytes which can be used for parsing multimedia form. It can be configured in configuration file using string like: 1m, 10m, 500kb etc. It's 1MB in default. FormParsingMemory\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u6307\u5b9a\u6700\u5927\u5185\u5b58\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u53ef\u7528\u4e8e\u89e3\u6790\u591a\u5a92\u4f53\u683c\u5f0f\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5b57\u7b26\u4e32\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5bf9\u5176\u8fdb\u884c\u914d\u7f6e\uff1a1m\uff0c10m\uff0c500kb\u7b49\u3002\u9ed8\u8ba4\u4e3a1MB\u3002 Other NameToUriType int NameToUriType specifies the type for converting struct method name to URI when registering routes. NameToUriType\u6307\u5b9a\u5728\u6ce8\u518c\u8def\u7531\u65f6\u7528\u4e8e\u5c06\u7ed3\u6784\u65b9\u6cd5\u540d\u79f0\u8f6c\u6362\u4e3aURI\u7684\u7c7b\u578b Other RouteOverWrite bool RouteOverWrite allows overwrite the route if duplicated. \u5982\u679c\u590d\u5236\uff0cRouteOverWrite\u5141\u8bb8\u8986\u76d6\u8def\u7531 Other DumpRouterMap bool specifies whether automatically dumps router map when server starts. \u6307\u5b9a\u670d\u52a1\u5668\u542f\u52a8\u65f6\u662f\u5426\u81ea\u52a8\u8f6c\u50a8\u8def\u7531\u5668\u6620\u5c04\u3002 Other Graceful bool Graceful enables graceful reload feature for all servers of the process. \u4e3a\u8fdb\u7a0b\u7684\u6240\u6709\u670d\u52a1\u5668\u542f\u7528\u4f18\u7f8e\u7684\u91cd\u65b0\u52a0\u8f7d\u529f\u80fd 2.2 [logger] \u914d\u7f6e\u9009\u9879 \u914d\u7f6e\u7c7b\u578b \u82f1\u6587\u63cf\u8ff0 \u4e2d\u6587\u63cf\u8ff0 LogPath string LogPath specifies the directory for storing logging files. LogPath\u6307\u5b9a\u7528\u4e8e\u5b58\u50a8\u65e5\u5fd7\u6587\u4ef6\u7684\u76ee\u5f55 LogStdout bool LogStdout specifies whether printing logging content to stdout. LogStdout\u6307\u5b9a\u662f\u5426\u5c06\u65e5\u5fd7\u8bb0\u5f55\u5185\u5bb9\u6253\u5370\u5230stdout\u3002 ErrorStack bool ErrorStack specifies whether logging stack information when error. ErrorStack\u6307\u5b9a\u662f\u5426\u5728\u53d1\u751f\u9519\u8bef\u65f6\u8bb0\u5f55\u5806\u6808\u4fe1\u606f\u3002 ErrorStack bool ErrorLogEnabled enables error logging content to files. ErrorLogEnabled\u5141\u8bb8\u5c06\u5185\u5bb9\u9519\u8bef\u8bb0\u5f55\u5230\u6587\u4ef6\u4e2d\u3002 ErrorLogPattern string AccessLogPattern specifies the error log file pattern like: access-{Ymd}.log AccessLogPattern\u6307\u5b9a\u9519\u8bef\u65e5\u5fd7\u6587\u4ef6\u6a21\u5f0f\uff0c\u4f8b\u5982\uff1aaccess- {Ymd} .log 2.3 [database] \u5b8c\u6574\u7684 config.toml \u6570\u636e\u5e93\u914d\u7f6e\u9879\u7684\u6570\u636e\u683c\u5f0f\u5f62\u5982\u4e0b\uff1a [database] [[database.\u5206\u7ec4\u540d\u79f0]] Host = \"\u5730\u5740\" Port = \"\u7aef\u53e3\" User = \"\u8d26\u53f7\" Pass = \"\u5bc6\u7801\" Name = \"\u6570\u636e\u5e93\u540d\u79f0\" Type = \"\u6570\u636e\u5e93\u7c7b\u578b(\u76ee\u524d\u652f\u6301mysql/pgsql/sqlite)\" Role = \"(\u53ef\u9009)\u6570\u636e\u5e93\u4e3b\u4ece\u89d2\u8272(master/slave)\uff0c\u4e0d\u4f7f\u7528\u5e94\u7528\u5c42\u7684\u4e3b\u4ece\u673a\u5236\u8bf7\u5747\u8bbe\u7f6e\u4e3amaster\" Debug = \"(\u53ef\u9009)\u5f00\u542f\u8c03\u8bd5\u6a21\u5f0f\" Prefix = \"(\u53ef\u9009)\u8868\u540d\u524d\u7f00\" DryRun = \"(\u53ef\u9009)ORM\u7a7a\u8dd1(\u53ea\u8bfb\u4e0d\u5199)\" Charset = \"(\u53ef\u9009)\u6570\u636e\u5e93\u7f16\u7801(\u5982: utf8/gbk/gb2312)\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3autf8\" Weight = \"(\u53ef\u9009)\u8d1f\u8f7d\u5747\u8861\u6743\u91cd\uff0c\u7528\u4e8e\u8d1f\u8f7d\u5747\u8861\u63a7\u5236\uff0c\u4e0d\u4f7f\u7528\u5e94\u7528\u5c42\u7684\u8d1f\u8f7d\u5747\u8861\u673a\u5236\u8bf7\u7f6e\u7a7a\" Linkinfo = \"(\u53ef\u9009)\u81ea\u5b9a\u4e49\u6570\u636e\u5e93\u94fe\u63a5\u4fe1\u606f\uff0c\u5f53\u8be5\u5b57\u6bb5\u88ab\u8bbe\u7f6e\u503c\u65f6\uff0c\u4ee5\u4e0a\u94fe\u63a5\u5b57\u6bb5(Host,Port,User,Pass,Name)\u5c06\u5931\u6548\uff0c\u4f46\u662ftype\u5fc5\u987b\u6709\u503c\" MaxIdle = \"(\u53ef\u9009)\u8fde\u63a5\u6c60\u6700\u5927\u95f2\u7f6e\u7684\u8fde\u63a5\u6570\" MaxOpen = \"(\u53ef\u9009)\u8fde\u63a5\u6c60\u6700\u5927\u6253\u5f00\u7684\u8fde\u63a5\u6570\" MaxLifetime = \"(\u53ef\u9009\uff0c\u5355\u4f4d\u79d2)\u8fde\u63a5\u5bf9\u8c61\u53ef\u91cd\u590d\u4f7f\u7528\u7684\u65f6\u95f4\u957f\u5ea6\" gdb \u6570\u636e\u5e93\u7ba1\u7406\u6a21\u5757\u7684\u5185\u90e8\u914d\u7f6e\u7ba1\u7406\u6570\u636e\u7ed3\u6784\u5982\u4e0b\uff1a type Config map[string]ConfigGroup // \u6570\u636e\u5e93\u914d\u7f6e\u5bf9\u8c61 type ConfigGroup []ConfigNode // \u6570\u636e\u5e93\u5206\u7ec4\u914d\u7f6e // \u6570\u636e\u5e93\u914d\u7f6e\u9879(\u4e00\u4e2a\u5206\u7ec4\u914d\u7f6e\u5bf9\u5e94\u591a\u4e2a\u914d\u7f6e\u9879) type ConfigNode struct { Host string // \u5730\u5740 Port string // \u7aef\u53e3 User string // \u8d26\u53f7 Pass string // \u5bc6\u7801 Name string // \u6570\u636e\u5e93\u540d\u79f0 Type string // \u6570\u636e\u5e93\u7c7b\u578b\uff1amysql, sqlite, mssql, pgsql, oracle Role string // (\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3amaster)\u6570\u636e\u5e93\u7684\u89d2\u8272\uff0c\u7528\u4e8e\u4e3b\u4ece\u64cd\u4f5c\u5206\u79bb\uff0c\u81f3\u5c11\u9700\u8981\u6709\u4e00\u4e2amaster\uff0c\u53c2\u6570\u503c\uff1amaster, slave Debug bool // (\u53ef\u9009)\u5f00\u542f\u8c03\u8bd5\u6a21\u5f0f Charset string // (\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a utf8)\u7f16\u7801\uff0c\u9ed8\u8ba4\u4e3a utf8 Prefix string // (\u53ef\u9009)\u8868\u540d\u524d\u7f00 Weight int // (\u53ef\u9009)\u7528\u4e8e\u8d1f\u8f7d\u5747\u8861\u7684\u6743\u91cd\u8ba1\u7b97\uff0c\u5f53\u96c6\u7fa4\u4e2d\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u6743\u91cd\u6ca1\u6709\u4efb\u4f55\u610f\u4e49 Linkinfo string // (\u53ef\u9009)\u81ea\u5b9a\u4e49\u94fe\u63a5\u4fe1\u606f\uff0c\u5f53\u8be5\u5b57\u6bb5\u88ab\u8bbe\u7f6e\u503c\u65f6\uff0c\u4ee5\u4e0a\u94fe\u63a5\u5b57\u6bb5(Host,Port,User,Pass,Name)\u5c06\u5931\u6548(\u8be5\u5b57\u6bb5\u662f\u4e00\u4e2a\u6269\u5c55\u529f\u80fd) MaxIdleConnCount int // (\u53ef\u9009)\u8fde\u63a5\u6c60\u6700\u5927\u95f2\u7f6e\u7684\u8fde\u63a5\u6570 MaxOpenConnCount int // (\u53ef\u9009)\u8fde\u63a5\u6c60\u6700\u5927\u6253\u5f00\u7684\u8fde\u63a5\u6570 MaxConnLifetime int // (\u53ef\u9009\uff0c\u5355\u4f4d\u79d2)\u8fde\u63a5\u5bf9\u8c61\u53ef\u91cd\u590d\u4f7f\u7528\u7684\u65f6\u95f4\u957f\u5ea6 } \u7b80\u5316\u914d\u7f6e \u4e3a\u517c\u5bb9\u4e0d\u540c\u7684\u6570\u636e\u5e93\u7c7b\u578b\uff0c gdb \u5c06\u6570\u636e\u5e93\u7684\u5404\u4e2a\u5b57\u6bb5\u62c6\u5206\u51fa\u6765\u5355\u72ec\u914d\u7f6e\uff0c\u8fd9\u6837\u5bf9\u4e8e\u5404\u79cd\u6570\u636e\u5e93\u7684\u5bf9\u63a5\u6765\u8bf4\u517c\u5bb9\u6027\u4f1a\u5f88\u597d\u3002\u4f46\u662f\u5bf9\u4e8e\u5f00\u53d1\u8005\u6765\u8bf4\u770b\u8d77\u6765\u914d\u7f6e\u6bd4\u8f83\u591a\u3002\u9488\u5bf9\u4e8e\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u5df2\u786e\u5b9a\u7684\u6570\u636e\u5e93\u7c7b\u578b\u7684\u914d\u7f6e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 linkinfo \u5c5e\u6027\uff08\u540d\u79f0\u4e5f\u53ef\u4ee5\u7b80\u5316\u4e3a link \uff09\u8fdb\u884c\u914d\u7f6e\u3002\u5982\uff1a [database] [[database.default]] type = \"mysql\" link = \"root:12345678@tcp(127.0.0.1:3306)/test\" [[database.user]] type = \"mysql\" link = \"mysql:root:12345678@tcp(127.0.0.1:3306)/user\" \u4e5f\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a [database] [[database.default]] link = \"mysql:root:12345678@tcp(127.0.0.1:3306)/test\" [[database.user]] link = \"mysql:root:12345678@tcp(127.0.0.1:3306)/user\" \u4e0d\u540c\u6570\u636e\u7c7b\u578b\u5bf9\u5e94\u7684 linkinfo \u5982\u4e0b: \u6570\u636e\u5e93\u7c7b\u578b Linkinfo\u914d\u7f6e \u66f4\u591a\u53c2\u6570 mysql mysql: \u8d26\u53f7:\u5bc6\u7801@tcp(\u5730\u5740:\u7aef\u53e3)/\u6570\u636e\u5e93\u540d\u79f0 mysql pgsql pgsql: user=\u8d26\u53f7 password=\u5bc6\u7801 host=\u5730\u5740 port=\u7aef\u53e3 dbname=\u6570\u636e\u5e93\u540d\u79f0 pq mssql mssql: user id=\u8d26\u53f7;password=\u5bc6\u7801;server=\u5730\u5740;port=\u7aef\u53e3;database=\u6570\u636e\u5e93\u540d\u79f0;encrypt=disable go-mssqldb sqlite sqlite: \u6587\u4ef6\u7edd\u5bf9\u8def\u5f84 (\u5982: /var/lib/db.sqlite3 ) go-sqlite3 oracle oracle: \u8d26\u53f7/\u5bc6\u7801@\u5730\u5740:\u7aef\u53e3/\u6570\u636e\u5e93\u540d\u79f0 go-oci8 2.4 [redis] \u5b98\u65b9\u63a8\u8350\u914d\u7f6e \u63a8\u8350\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u6765\u7ba1\u7406Redis\u914d\u7f6e\uff0c\u5728 config.toml \u4e2d\u7684\u914d\u7f6e\u793a\u4f8b\u5982\u4e0b\uff1a # Redis\u6570\u636e\u5e93\u914d\u7f6e [redis] # Redis\u7684\u914d\u7f6e\u683c\u5f0fhost:port[,db,pass?maxIdle=x&maxActive=x&idleTimeout=x&maxConnLifetime=x] default = \"127.0.0.1:6379,0\" cache = \"127.0.0.1:6379,1,123456?idleTimeout=600\" \u5404\u914d\u7f6e\u9879\u8bf4\u660e\u5982\u4e0b\uff1a \u914d\u7f6e\u9879\u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u987b \u9ed8\u8ba4\u503c \u8bf4\u660e host string \u662f - \u5730\u5740 port int \u662f - \u7aef\u53e3 db int \u5426 0 \u6570\u636e\u5e93 pass string \u5426 - \u6388\u6743\u5bc6\u7801 maxIdle int \u5426 0 \u5141\u8bb8\u9650\u5236\u7684\u8fde\u63a5\u6570(0\u8868\u793a\u4e0d\u95f2\u7f6e) maxActive int \u5426 0 \u6700\u5927\u8fde\u63a5\u6570\u91cf\u9650\u5236(0\u8868\u793a\u4e0d\u9650\u5236) idleTimeout time.Duration \u5426 60 \u8fde\u63a5\u6700\u5927\u7a7a\u95f2\u65f6\u95f4(\u5355\u4f4d\u79d2,\u4e0d\u5141\u8bb8\u8bbe\u7f6e\u4e3a0) maxConnLifetime time.Duration \u5426 60 \u8fde\u63a5\u6700\u957f\u5b58\u6d3b\u65f6\u95f4(\u5355\u4f4d\u79d2,\u4e0d\u5141\u8bb8\u8bbe\u7f6e\u4e3a0) gredis \u6570\u636e\u5e93\u7ba1\u7406\u6a21\u5757\u7684\u5185\u90e8\u914d\u7f6e\u7ba1\u7406\u6570\u636e\u7ed3\u6784\u5982\u4e0b\uff1a // Redis configuration. type Config struct { Host string Port int Db int Pass string // Password for AUTH. MaxIdle int // Maximum number of connections allowed to be idle (default is 10) MaxActive int // Maximum number of connections limit (default is 0 means no limit). IdleTimeout time.Duration // Maximum idle time for connection (default is 10 seconds, not allowed to be set to 0) MaxConnLifetime time.Duration // Maximum lifetime of the connection (default is 30 seconds, not allowed to be set to 0) ConnectTimeout time.Duration // Dial connection timeout. }","title":"\u914d\u7f6e\u6587\u4ef6"},{"location":"Manual/config/#2-configtoml","text":"","title":"2. \u914d\u7f6e\u6587\u4ef6\u8be6\u89e3(config.toml)"},{"location":"Manual/config/#21-server","text":"\u914d\u7f6e\u5206\u7c7b \u914d\u7f6e\u540d \u914d\u7f6e\u7c7b\u578b \u82f1\u6587\u63cf\u8ff0 \u4e2d\u6587\u63cf\u8ff0 \u94fe\u63a5 Basic Address string Address specifies the server listening address like \"port\" or \":port\",multiple addresses joined using ','. \u5730\u5740\u6307\u5b9a\u670d\u52a1\u5668\u7684\u4fa6\u542c\u5730\u5740\uff0c\u4f8b\u5982\u201c port\u201d\u6216\u201c\uff1aport\u201d\uff0c\u4f7f\u7528'\uff0c'\u8fde\u63a5\u591a\u4e2a\u5730\u5740 Basic HTTPSAddr string HTTPSAddr specifies the HTTPS addresses, multiple addresses joined using char ','. HTTPSAddr\u6307\u5b9aHTTPS\u5730\u5740\uff0c\u5373\u4f7f\u7528','\u8fde\u63a5\u7684\u591a\u4e2a\u5730\u5740 Basic HTTPSCertPath string HTTPSCertPath specifies certification file path for HTTPS service. HTTPSCertPath\u6307\u5b9aHTTPS\u670d\u52a1\u7684\u8ba4\u8bc1\u6587\u4ef6\u8def\u5f84 Basic HTTPSKeyPath string HTTPSKeyPath specifies the key file path for HTTPS service. HTTPSKeyPath\u6307\u5b9aHTTPS\u670d\u52a1\u7684\u5bc6\u94a5\u6587\u4ef6\u8def\u5f84 Basic ServerAgent string specifies the server agent information, which is wrote to Http response header as \"Server\" ServerAgent\u6307\u5b9a\u670d\u52a1\u5668\u4ee3\u7406\u4fe1\u606f\uff0c\u8be5\u4fe1\u606f\u5c06\u5199\u5165\uff0cHTTP\u54cd\u5e94\u6807\u5934\u4e3a\u201c\u670d\u52a1\u5668\u201d Basic TLSConfig *tls.Config TLSConfig optionally provides a TLS configuration for use by ServeTLS and ListenAndServeTLS. Note that this value is cloned by ServeTLS and ListenAndServeTLS, so it's not possible to modify the configuration with methods like tls.Config.SetSessionTicketKeys. To use SetSessionTicketKeys, use Server.Serve with a TLS Listener instead. \uff08\u53ef\u9009\uff09\u63d0\u4f9b\u7531ServeTLS\u548cListenAndServeTLS\u4f7f\u7528\u7684TLS\u914d\u7f6e\u8bf7\u6ce8\u610f\uff0c\u6b64\u503c\u662f\u7531ServeTLS\u548cListenAndServeTLS\u514b\u9686\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u4f7f\u7528tls.Config.SetSessionTicketKeys\u4e4b\u7c7b\u7684\u65b9\u6cd5\u4fee\u6539\u914d\u7f6e\u3002\u82e5\u8981\u4f7f\u7528SetSessionTicketKeys\uff0c\u8bf7\u6539\u4e3a\u5c06Server.Serve\u4e0eTLS\u4fa6\u542c\u5668\u4e00\u8d77\u4f7f\u7528 Basic Handler http.Handler Handler the handler for HTTP request. \u5904\u7406\u7a0b\u5e8fHTTP\u8bf7\u6c42\u7684\u5904\u7406\u7a0b\u5e8f Basic ReadTimeout time.Duration ReadTimeout is the maximum duration for reading the entire request, including the body. Because ReadTimeout does not let Handlers make per-request decisions on each request body's acceptable deadline or upload rate, most users will prefer to use ReadHeaderTimeout. It is valid to use them both. ReadTimeout\u662f\u8bfb\u53d6\u6574\u4e2a\u8bf7\u6c42\uff08\u5305\u62ec\u6b63\u6587\uff09\u7684\u6700\u5927\u6301\u7eed\u65f6\u95f4\u3002\u7531\u4e8eReadTimeout\u4e0d\u5141\u8bb8\u5904\u7406\u7a0b\u5e8f\u6839\u636e\u6bcf\u4e2a\u8bf7\u6c42\u6b63\u6587\u7684\u53ef\u63a5\u53d7\u7684\u622a\u6b62\u65e5\u671f\u6216\u4e0a\u8f7d\u901f\u7387\u505a\u51fa\u6bcf\u4e2a\u8bf7\u6c42\u7684\u51b3\u5b9a\uff0c\u56e0\u6b64\u5927\u591a\u6570\u7528\u6237\u5c06\u66f4\u559c\u6b22\u4f7f\u7528ReadHeaderTimeout\u3002\u540c\u65f6\u4f7f\u7528\u5b83\u4eec\u662f\u6709\u6548\u7684 Basic WriteTimeout time.Duration WriteTimeout is the maximum duration before timing out writes of the response. It is reset whenever a new request's header is read. Like ReadTimeout, it does not let Handlers make decisions on a per-request basis. WriteTimeout\u662f\u8d85\u65f6\u5199\u5165\u54cd\u5e94\u4e4b\u524d\u7684\u6700\u5927\u6301\u7eed\u65f6\u95f4\u3002\u6bcf\u5f53\u8bfb\u53d6\u65b0\u8bf7\u6c42\u7684\u6807\u5934\u65f6\uff0c\u90fd\u4f1a\u5c06\u5176\u91cd\u7f6e\u3002\u4e0eReadTimeout\u4e00\u6837\uff0c\u5b83\u4e5f\u4e0d\u5141\u8bb8\u5904\u7406\u7a0b\u5e8f\u6839\u636e\u6bcf\u4e2a\u8bf7\u6c42\u505a\u51fa\u51b3\u7b56 Basic IdleTimeout time.Duration IdleTimeout is the maximum amount of time to wait for the next request when keep-alives are enabled. If IdleTimeout is zero, the value of ReadTimeout is used. If both are zero, there is no timeout. IdleTimeout\u662f\u542f\u7528\u4fdd\u6301\u6d3b\u52a8\u72b6\u6001\u540e\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u7684\u6700\u957f\u65f6\u95f4\u3002\u5982\u679cIdleTimeout\u4e3a\u96f6\uff0c\u5219\u4f7f\u7528ReadTimeout\u7684\u503c\u3002\u5982\u679c\u4e24\u8005\u5747\u4e3a\u96f6\uff0c\u5219\u6ca1\u6709\u8d85\u65f6 Basic MaxHeaderBytes int MaxHeaderBytes controls the maximum number of bytes the server will read parsing the request header's keys and values, including the request line. It does not limit the size of the request body. It can be configured in configuration file using string like: 1m, 10m, 500kb etc. It's 1024 bytes in default. MaxHeaderBytes\u63a7\u5236\u670d\u52a1\u5668\u8bfb\u53d6\u7684\u6700\u5927\u5b57\u8282\u6570\uff0c\u4ee5\u89e3\u6790\u8bf7\u6c42\u6807\u5934\u7684\u952e\u548c\u503c\uff08\u5305\u62ec\u8bf7\u6c42\u884c\uff09\u3002\u5b83\u4e0d\u9650\u5236\u8bf7\u6c42\u4e3b\u4f53\u7684\u5927\u5c0f\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5b57\u7b26\u4e32\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5bf9\u5176\u8fdb\u884c\u914d\u7f6e\uff1a1m\uff0c10m\uff0c500kb\u7b49\u3002\u9ed8\u8ba4\u503c\u4e3a1024\u5b57\u8282 Basic ServerAgent string ServerAgent specifies the server agent information, which is wrote to HTTP response header as \"Server\" ServerAgent\u6307\u5b9a\u670d\u52a1\u5668\u4ee3\u7406\u4fe1\u606f\uff0c\u8be5\u4fe1\u606f\u4f5c\u4e3a\u201c\u670d\u52a1\u5668\u201d\u5199\u5165HTTP\u54cd\u5e94\u6807\u5934 Basic View *gview.View View specifies the default template view object for the server. \u89c6\u56fe\u6307\u5b9a\u670d\u52a1\u5668\u7684\u9ed8\u8ba4\u6a21\u677f\u89c6\u56fe\u5bf9\u8c61 Static Rewrites map[string]string Rewrites specifies the URI rewrite rules map. \u91cd\u5199\u6307\u5b9aURI\u91cd\u5199\u89c4\u5219\u6620\u5c04 Static IndexFiles []string IndexFiles specifies the index files for static folder. \u6307\u5b9a\u9759\u6001\u6587\u4ef6\u5939\u7684\u7d22\u5f15\u6587\u4ef6 \u70b9\u6211 Static IndexFolder bool IndexFolder specifies if listing sub-files when requesting folder.The server responses HTTP status code 403 if it is false. \u6307\u5b9a\u5728\u8bf7\u6c42\u6587\u4ef6\u5939\u65f6\u662f\u5426\u5217\u51fa\u5b50\u6587\u4ef6\u3002\u670d\u52a1\u5668\u8fd4\u56deHTTP\u72b6\u6001\u7801403\uff08\u5982\u679c\u4e3afalse\uff09 Static ServerRoot string specifies the root directory for static service \u6307\u5b9a\u9759\u6001\u670d\u52a1\u7684\u6839\u76ee\u5f55,\u7528\u6765\u8bbe\u7f6eServer\u7684\u4e3b\u76ee\u5f55\uff08\u7c7b\u4f3cnginx\u4e2d\u7684root\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff09 Static SearchPaths []string SearchPaths specifies additional searching directories for static service. \u6307\u5b9a\u7528\u4e8e\u9759\u6001\u670d\u52a1\u7684\u5176\u4ed6\u641c\u7d22\u76ee\u5f55 Static StaticPaths []staticPathItem StaticPaths specifies URI to directory mapping array. \u6307\u5b9aURI\u5230\u76ee\u5f55\u7684\u6620\u5c04\u6570\u7ec4 Static FileServerEnabled bool FileServerEnabled is the global switch for static service.It is automatically set enabled if any static path is set. \u9759\u6001\u670d\u52a1\u7684\u5168\u5c40\u5f00\u5173\u3002\u5982\u679c\u8bbe\u7f6e\u4e86\u4efb\u4f55\u9759\u6001\u8def\u5f84\uff0c\u5b83\u5c06\u81ea\u52a8\u8bbe\u7f6e\u4e3a\u542f\u7528 Cookie CookieMaxAge time.Duration CookieMaxAge specifies the max TTL for cookie items. \u6307\u5b9aCookie\u9879\u76ee\u7684\u6700\u5927TTL Cookie CookiePath string CookiePath specifies cookie path.It also affects the default storage for session id. \u6307\u5b9acookie\u8def\u5f84\uff0c\u5b83\u4e5f\u4f1a\u5f71\u54cd\u4f1a\u8bddID\u7684\u9ed8\u8ba4\u5b58\u50a8 Cookie CookieDomain string CookieDomain specifies cookie domain.It also affects the default storage for session id. \u6307\u5b9acookie\u57df\uff0c\u8fd8\u4f1a\u5f71\u54cd\u4f1a\u8bddID\u7684\u9ed8\u8ba4\u5b58\u50a8 Session SessionMaxAge time.Duration specifies max TTL for session items. \u6307\u5b9a\u4f1a\u8bdd\u9879\u76ee\u7684\u6700\u5927TTL Session SessionIdName string specifies the session id name. \u6307\u5b9a\u4f1a\u8bddID\u540d\u79f0,SessionId\u7684\u8bc6\u522b\u540d\u79f0 Session SessionPath string specifies the session storage directory path for storing session files,It only makes sense if the session storage is type of file storage. \u6307\u5b9a\u7528\u4e8e\u5b58\u50a8\u4f1a\u8bdd\u6587\u4ef6\u7684\u4f1a\u8bdd\u5b58\u50a8\u76ee\u5f55\u8def\u5f84\u3002\u4ec5\u5f53\u4f1a\u8bdd\u5b58\u50a8\u4e3a\u6587\u4ef6\u5b58\u50a8\u7c7b\u578b\u65f6\u624d\u6709\u610f\u4e49 Session SessionStorage gsession.Storage SessionStorage specifies the session storage SessionStorage\u6307\u5b9a\u4f1a\u8bdd\u5b58\u50a8 Logging Logger *glog.Logger Logger specifies the logger for server. \u8bb0\u5f55\u5668\u6307\u5b9a\u670d\u52a1\u5668\u7684\u8bb0\u5f55\u5668 Logging LogPath string LogPath specifies the directory for storing logging files. \u6307\u5b9a\u7528\u4e8e\u5b58\u50a8\u65e5\u5fd7\u6587\u4ef6\u7684\u76ee\u5f55 Logging LogStdout bool LogStdout specifies whether printing logging content to stdout. LogStdout\u6307\u5b9a\u662f\u5426\u5c06\u65e5\u5fd7\u8bb0\u5f55\u5185\u5bb9\u6253\u5370\u5230stdout Logging ErrorStack bool ErrorStack specifies whether logging stack information when error. ErrorStack\u6307\u5b9a\u662f\u5426\u5728\u53d1\u751f\u9519\u8bef\u65f6\u8bb0\u5f55\u5806\u6808\u4fe1\u606f Logging ErrorLogEnabled bool enables error logging content to files. \u542f\u7528\u9519\u8bef\u65e5\u5fd7\u8bb0\u5f55\u6587\u4ef6 \u70b9\u6211 Logging AccessLogEnabled bool enables access logging content to files. \u542f\u7528\u8bbf\u95ee\u65e5\u5fd7\u8bb0\u5f55\u5185\u5bb9\u5230\u6587\u4ef6 \u70b9\u6211 Logging AccessLogPattern string AccessLogPattern specifies the error log file pattern like: access-{Ymd}.log AccessLogPattern\u6307\u5b9a\u9519\u8bef\u65e5\u5fd7\u6587\u4ef6\u6a21\u5f0f\uff0c\u4f8b\u5982\uff1aaccess- {Ymd} .log PProf PProfEnabled bool enables PProf feature. \u542f\u7528PProf\u529f\u80fd \u70b9\u6211 PProf PProfPattern string PProfPattern specifies the PProf service pattern for router. \u6307\u5b9a\u8def\u7531\u5668\u7684PProf\u670d\u52a1\u6a21\u5f0f Other ClientMaxBodySize int64 ClientMaxBodySize specifies the max body size limit in bytes for client request. It can be configured in configuration file using string like: 1m, 10m, 500kb etc. It's 8MB in default. ClientMaxBodySize\u6307\u5b9a\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u6700\u5927\u4e3b\u4f53\u5927\u5c0f\u9650\u5236\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5b57\u7b26\u4e32\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u914d\u7f6e\uff1a1m\uff0c10m\uff0c500kb\u7b49\u3002\u9ed8\u8ba4\u4e3a8MB\u3002 Other FormParsingMemory int64 FormParsingMemory specifies max memory buffer size in bytes which can be used for parsing multimedia form. It can be configured in configuration file using string like: 1m, 10m, 500kb etc. It's 1MB in default. FormParsingMemory\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u6307\u5b9a\u6700\u5927\u5185\u5b58\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u53ef\u7528\u4e8e\u89e3\u6790\u591a\u5a92\u4f53\u683c\u5f0f\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5b57\u7b26\u4e32\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5bf9\u5176\u8fdb\u884c\u914d\u7f6e\uff1a1m\uff0c10m\uff0c500kb\u7b49\u3002\u9ed8\u8ba4\u4e3a1MB\u3002 Other NameToUriType int NameToUriType specifies the type for converting struct method name to URI when registering routes. NameToUriType\u6307\u5b9a\u5728\u6ce8\u518c\u8def\u7531\u65f6\u7528\u4e8e\u5c06\u7ed3\u6784\u65b9\u6cd5\u540d\u79f0\u8f6c\u6362\u4e3aURI\u7684\u7c7b\u578b Other RouteOverWrite bool RouteOverWrite allows overwrite the route if duplicated. \u5982\u679c\u590d\u5236\uff0cRouteOverWrite\u5141\u8bb8\u8986\u76d6\u8def\u7531 Other DumpRouterMap bool specifies whether automatically dumps router map when server starts. \u6307\u5b9a\u670d\u52a1\u5668\u542f\u52a8\u65f6\u662f\u5426\u81ea\u52a8\u8f6c\u50a8\u8def\u7531\u5668\u6620\u5c04\u3002 Other Graceful bool Graceful enables graceful reload feature for all servers of the process. \u4e3a\u8fdb\u7a0b\u7684\u6240\u6709\u670d\u52a1\u5668\u542f\u7528\u4f18\u7f8e\u7684\u91cd\u65b0\u52a0\u8f7d\u529f\u80fd","title":"2.1 [server]"},{"location":"Manual/config/#22-logger","text":"\u914d\u7f6e\u9009\u9879 \u914d\u7f6e\u7c7b\u578b \u82f1\u6587\u63cf\u8ff0 \u4e2d\u6587\u63cf\u8ff0 LogPath string LogPath specifies the directory for storing logging files. LogPath\u6307\u5b9a\u7528\u4e8e\u5b58\u50a8\u65e5\u5fd7\u6587\u4ef6\u7684\u76ee\u5f55 LogStdout bool LogStdout specifies whether printing logging content to stdout. LogStdout\u6307\u5b9a\u662f\u5426\u5c06\u65e5\u5fd7\u8bb0\u5f55\u5185\u5bb9\u6253\u5370\u5230stdout\u3002 ErrorStack bool ErrorStack specifies whether logging stack information when error. ErrorStack\u6307\u5b9a\u662f\u5426\u5728\u53d1\u751f\u9519\u8bef\u65f6\u8bb0\u5f55\u5806\u6808\u4fe1\u606f\u3002 ErrorStack bool ErrorLogEnabled enables error logging content to files. ErrorLogEnabled\u5141\u8bb8\u5c06\u5185\u5bb9\u9519\u8bef\u8bb0\u5f55\u5230\u6587\u4ef6\u4e2d\u3002 ErrorLogPattern string AccessLogPattern specifies the error log file pattern like: access-{Ymd}.log AccessLogPattern\u6307\u5b9a\u9519\u8bef\u65e5\u5fd7\u6587\u4ef6\u6a21\u5f0f\uff0c\u4f8b\u5982\uff1aaccess- {Ymd} .log","title":"2.2 [logger]"},{"location":"Manual/config/#23-database","text":"\u5b8c\u6574\u7684 config.toml \u6570\u636e\u5e93\u914d\u7f6e\u9879\u7684\u6570\u636e\u683c\u5f0f\u5f62\u5982\u4e0b\uff1a [database] [[database.\u5206\u7ec4\u540d\u79f0]] Host = \"\u5730\u5740\" Port = \"\u7aef\u53e3\" User = \"\u8d26\u53f7\" Pass = \"\u5bc6\u7801\" Name = \"\u6570\u636e\u5e93\u540d\u79f0\" Type = \"\u6570\u636e\u5e93\u7c7b\u578b(\u76ee\u524d\u652f\u6301mysql/pgsql/sqlite)\" Role = \"(\u53ef\u9009)\u6570\u636e\u5e93\u4e3b\u4ece\u89d2\u8272(master/slave)\uff0c\u4e0d\u4f7f\u7528\u5e94\u7528\u5c42\u7684\u4e3b\u4ece\u673a\u5236\u8bf7\u5747\u8bbe\u7f6e\u4e3amaster\" Debug = \"(\u53ef\u9009)\u5f00\u542f\u8c03\u8bd5\u6a21\u5f0f\" Prefix = \"(\u53ef\u9009)\u8868\u540d\u524d\u7f00\" DryRun = \"(\u53ef\u9009)ORM\u7a7a\u8dd1(\u53ea\u8bfb\u4e0d\u5199)\" Charset = \"(\u53ef\u9009)\u6570\u636e\u5e93\u7f16\u7801(\u5982: utf8/gbk/gb2312)\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3autf8\" Weight = \"(\u53ef\u9009)\u8d1f\u8f7d\u5747\u8861\u6743\u91cd\uff0c\u7528\u4e8e\u8d1f\u8f7d\u5747\u8861\u63a7\u5236\uff0c\u4e0d\u4f7f\u7528\u5e94\u7528\u5c42\u7684\u8d1f\u8f7d\u5747\u8861\u673a\u5236\u8bf7\u7f6e\u7a7a\" Linkinfo = \"(\u53ef\u9009)\u81ea\u5b9a\u4e49\u6570\u636e\u5e93\u94fe\u63a5\u4fe1\u606f\uff0c\u5f53\u8be5\u5b57\u6bb5\u88ab\u8bbe\u7f6e\u503c\u65f6\uff0c\u4ee5\u4e0a\u94fe\u63a5\u5b57\u6bb5(Host,Port,User,Pass,Name)\u5c06\u5931\u6548\uff0c\u4f46\u662ftype\u5fc5\u987b\u6709\u503c\" MaxIdle = \"(\u53ef\u9009)\u8fde\u63a5\u6c60\u6700\u5927\u95f2\u7f6e\u7684\u8fde\u63a5\u6570\" MaxOpen = \"(\u53ef\u9009)\u8fde\u63a5\u6c60\u6700\u5927\u6253\u5f00\u7684\u8fde\u63a5\u6570\" MaxLifetime = \"(\u53ef\u9009\uff0c\u5355\u4f4d\u79d2)\u8fde\u63a5\u5bf9\u8c61\u53ef\u91cd\u590d\u4f7f\u7528\u7684\u65f6\u95f4\u957f\u5ea6\" gdb \u6570\u636e\u5e93\u7ba1\u7406\u6a21\u5757\u7684\u5185\u90e8\u914d\u7f6e\u7ba1\u7406\u6570\u636e\u7ed3\u6784\u5982\u4e0b\uff1a type Config map[string]ConfigGroup // \u6570\u636e\u5e93\u914d\u7f6e\u5bf9\u8c61 type ConfigGroup []ConfigNode // \u6570\u636e\u5e93\u5206\u7ec4\u914d\u7f6e // \u6570\u636e\u5e93\u914d\u7f6e\u9879(\u4e00\u4e2a\u5206\u7ec4\u914d\u7f6e\u5bf9\u5e94\u591a\u4e2a\u914d\u7f6e\u9879) type ConfigNode struct { Host string // \u5730\u5740 Port string // \u7aef\u53e3 User string // \u8d26\u53f7 Pass string // \u5bc6\u7801 Name string // \u6570\u636e\u5e93\u540d\u79f0 Type string // \u6570\u636e\u5e93\u7c7b\u578b\uff1amysql, sqlite, mssql, pgsql, oracle Role string // (\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3amaster)\u6570\u636e\u5e93\u7684\u89d2\u8272\uff0c\u7528\u4e8e\u4e3b\u4ece\u64cd\u4f5c\u5206\u79bb\uff0c\u81f3\u5c11\u9700\u8981\u6709\u4e00\u4e2amaster\uff0c\u53c2\u6570\u503c\uff1amaster, slave Debug bool // (\u53ef\u9009)\u5f00\u542f\u8c03\u8bd5\u6a21\u5f0f Charset string // (\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a utf8)\u7f16\u7801\uff0c\u9ed8\u8ba4\u4e3a utf8 Prefix string // (\u53ef\u9009)\u8868\u540d\u524d\u7f00 Weight int // (\u53ef\u9009)\u7528\u4e8e\u8d1f\u8f7d\u5747\u8861\u7684\u6743\u91cd\u8ba1\u7b97\uff0c\u5f53\u96c6\u7fa4\u4e2d\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u6743\u91cd\u6ca1\u6709\u4efb\u4f55\u610f\u4e49 Linkinfo string // (\u53ef\u9009)\u81ea\u5b9a\u4e49\u94fe\u63a5\u4fe1\u606f\uff0c\u5f53\u8be5\u5b57\u6bb5\u88ab\u8bbe\u7f6e\u503c\u65f6\uff0c\u4ee5\u4e0a\u94fe\u63a5\u5b57\u6bb5(Host,Port,User,Pass,Name)\u5c06\u5931\u6548(\u8be5\u5b57\u6bb5\u662f\u4e00\u4e2a\u6269\u5c55\u529f\u80fd) MaxIdleConnCount int // (\u53ef\u9009)\u8fde\u63a5\u6c60\u6700\u5927\u95f2\u7f6e\u7684\u8fde\u63a5\u6570 MaxOpenConnCount int // (\u53ef\u9009)\u8fde\u63a5\u6c60\u6700\u5927\u6253\u5f00\u7684\u8fde\u63a5\u6570 MaxConnLifetime int // (\u53ef\u9009\uff0c\u5355\u4f4d\u79d2)\u8fde\u63a5\u5bf9\u8c61\u53ef\u91cd\u590d\u4f7f\u7528\u7684\u65f6\u95f4\u957f\u5ea6 }","title":"2.3 [database]"},{"location":"Manual/config/#_1","text":"\u4e3a\u517c\u5bb9\u4e0d\u540c\u7684\u6570\u636e\u5e93\u7c7b\u578b\uff0c gdb \u5c06\u6570\u636e\u5e93\u7684\u5404\u4e2a\u5b57\u6bb5\u62c6\u5206\u51fa\u6765\u5355\u72ec\u914d\u7f6e\uff0c\u8fd9\u6837\u5bf9\u4e8e\u5404\u79cd\u6570\u636e\u5e93\u7684\u5bf9\u63a5\u6765\u8bf4\u517c\u5bb9\u6027\u4f1a\u5f88\u597d\u3002\u4f46\u662f\u5bf9\u4e8e\u5f00\u53d1\u8005\u6765\u8bf4\u770b\u8d77\u6765\u914d\u7f6e\u6bd4\u8f83\u591a\u3002\u9488\u5bf9\u4e8e\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u5df2\u786e\u5b9a\u7684\u6570\u636e\u5e93\u7c7b\u578b\u7684\u914d\u7f6e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 linkinfo \u5c5e\u6027\uff08\u540d\u79f0\u4e5f\u53ef\u4ee5\u7b80\u5316\u4e3a link \uff09\u8fdb\u884c\u914d\u7f6e\u3002\u5982\uff1a [database] [[database.default]] type = \"mysql\" link = \"root:12345678@tcp(127.0.0.1:3306)/test\" [[database.user]] type = \"mysql\" link = \"mysql:root:12345678@tcp(127.0.0.1:3306)/user\" \u4e5f\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a [database] [[database.default]] link = \"mysql:root:12345678@tcp(127.0.0.1:3306)/test\" [[database.user]] link = \"mysql:root:12345678@tcp(127.0.0.1:3306)/user\" \u4e0d\u540c\u6570\u636e\u7c7b\u578b\u5bf9\u5e94\u7684 linkinfo \u5982\u4e0b: \u6570\u636e\u5e93\u7c7b\u578b Linkinfo\u914d\u7f6e \u66f4\u591a\u53c2\u6570 mysql mysql: \u8d26\u53f7:\u5bc6\u7801@tcp(\u5730\u5740:\u7aef\u53e3)/\u6570\u636e\u5e93\u540d\u79f0 mysql pgsql pgsql: user=\u8d26\u53f7 password=\u5bc6\u7801 host=\u5730\u5740 port=\u7aef\u53e3 dbname=\u6570\u636e\u5e93\u540d\u79f0 pq mssql mssql: user id=\u8d26\u53f7;password=\u5bc6\u7801;server=\u5730\u5740;port=\u7aef\u53e3;database=\u6570\u636e\u5e93\u540d\u79f0;encrypt=disable go-mssqldb sqlite sqlite: \u6587\u4ef6\u7edd\u5bf9\u8def\u5f84 (\u5982: /var/lib/db.sqlite3 ) go-sqlite3 oracle oracle: \u8d26\u53f7/\u5bc6\u7801@\u5730\u5740:\u7aef\u53e3/\u6570\u636e\u5e93\u540d\u79f0 go-oci8","title":"\u7b80\u5316\u914d\u7f6e"},{"location":"Manual/config/#24-redis","text":"","title":"2.4 [redis]"},{"location":"Manual/config/#_2","text":"\u63a8\u8350\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u6765\u7ba1\u7406Redis\u914d\u7f6e\uff0c\u5728 config.toml \u4e2d\u7684\u914d\u7f6e\u793a\u4f8b\u5982\u4e0b\uff1a # Redis\u6570\u636e\u5e93\u914d\u7f6e [redis] # Redis\u7684\u914d\u7f6e\u683c\u5f0fhost:port[,db,pass?maxIdle=x&maxActive=x&idleTimeout=x&maxConnLifetime=x] default = \"127.0.0.1:6379,0\" cache = \"127.0.0.1:6379,1,123456?idleTimeout=600\" \u5404\u914d\u7f6e\u9879\u8bf4\u660e\u5982\u4e0b\uff1a \u914d\u7f6e\u9879\u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u987b \u9ed8\u8ba4\u503c \u8bf4\u660e host string \u662f - \u5730\u5740 port int \u662f - \u7aef\u53e3 db int \u5426 0 \u6570\u636e\u5e93 pass string \u5426 - \u6388\u6743\u5bc6\u7801 maxIdle int \u5426 0 \u5141\u8bb8\u9650\u5236\u7684\u8fde\u63a5\u6570(0\u8868\u793a\u4e0d\u95f2\u7f6e) maxActive int \u5426 0 \u6700\u5927\u8fde\u63a5\u6570\u91cf\u9650\u5236(0\u8868\u793a\u4e0d\u9650\u5236) idleTimeout time.Duration \u5426 60 \u8fde\u63a5\u6700\u5927\u7a7a\u95f2\u65f6\u95f4(\u5355\u4f4d\u79d2,\u4e0d\u5141\u8bb8\u8bbe\u7f6e\u4e3a0) maxConnLifetime time.Duration \u5426 60 \u8fde\u63a5\u6700\u957f\u5b58\u6d3b\u65f6\u95f4(\u5355\u4f4d\u79d2,\u4e0d\u5141\u8bb8\u8bbe\u7f6e\u4e3a0) gredis \u6570\u636e\u5e93\u7ba1\u7406\u6a21\u5757\u7684\u5185\u90e8\u914d\u7f6e\u7ba1\u7406\u6570\u636e\u7ed3\u6784\u5982\u4e0b\uff1a // Redis configuration. type Config struct { Host string Port int Db int Pass string // Password for AUTH. MaxIdle int // Maximum number of connections allowed to be idle (default is 10) MaxActive int // Maximum number of connections limit (default is 0 means no limit). IdleTimeout time.Duration // Maximum idle time for connection (default is 10 seconds, not allowed to be set to 0) MaxConnLifetime time.Duration // Maximum lifetime of the connection (default is 30 seconds, not allowed to be set to 0) ConnectTimeout time.Duration // Dial connection timeout. }","title":"\u5b98\u65b9\u63a8\u8350\u914d\u7f6e"},{"location":"Manual/directory/","text":"\u76ee\u5f55\u7ed3\u6784 web \u76ee\u5f55\u7ed3\u6784 \u2514\u2500web \u251c\u2500\u2500 public \u2514\u2500\u2500 src \u251c\u2500\u2500 api \u251c\u2500\u2500 assets \u251c\u2500\u2500 components \u251c\u2500\u2500 directive \u251c\u2500\u2500 router \u251c\u2500\u2500 store \u251c\u2500\u2500 style \u251c\u2500\u2500 utils \u2514\u2500\u2500 view web \u76ee\u5f55\u7ed3\u6784\u8be6\u89e3 \u76ee\u5f55/\u6587\u4ef6\u540d\u79f0 \u8bf4\u660e \u63cf\u8ff0 public \u53d1\u5e03\u6a21\u677f src \u6e90\u7801\u5305 - api \u5411\u540e\u53f0\u53d1\u9001ajax\u7684\u5c01\u88c5\u5c42 - assets \u9759\u6001\u6587\u4ef6 - components \u7ec4\u4ef6 - router \u524d\u7aef\u8def\u7531 - store vuex \u72b6\u6001\u7ba1\u7406\u4ed3 - style \u901a\u7528\u6837\u5f0f\u6587\u4ef6 - utils \u524d\u7aef\u5de5\u5177\u5e93 - view \u524d\u7aef\u9875\u9762 server \u76ee\u5f55\u7ed3\u6784 \u251c\u2500\u2500 server \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 api \u2502 \u2502 \u251c\u2500\u2500 request \u2502 \u2502 \u251c\u2500\u2500 response \u2502 \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 middleware \u2502 \u251c\u2500\u2500 model \u2502 \u2514\u2500\u2500 service \u251c\u2500\u2500 boot \u251c\u2500\u2500 config \u251c\u2500\u2500 db \u251c\u2500\u2500 library \u2502 \u251c\u2500\u2500 gdbadapter \u2502 \u251c\u2500\u2500 global \u2502 \u2514\u2500\u2500 utils \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 log \u2502 \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 sql \u251c\u2500\u2500 packed \u251c\u2500\u2500 public \u251c\u2500\u2500 router \u2514\u2500\u2500 template \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 go.mod \u2514\u2500\u2500 main.go server \u76ee\u5f55\u7ed3\u6784\u8be6\u89e3 \u76ee\u5f55/\u6587\u4ef6\u540d\u79f0 \u8bf4\u660e \u63cf\u8ff0 app \u4e1a\u52a1\u903b\u8f91\u5c42 \u6240\u6709\u7684\u4e1a\u52a1\u903b\u8f91\u5b58\u653e\u76ee\u5f55\u3002 - api \u4e1a\u52a1\u63a5\u53e3 \u63a5\u6536/\u89e3\u6790\u7528\u6237\u8f93\u5165\u53c2\u6570\u7684\u5165\u53e3/\u63a5\u53e3\u5c42\u3002 -- request \u5165\u53c2\u7ed3\u6784\u4f53 \u63a5\u6536\u524d\u7aef\u53d1\u9001\u5230\u540e\u7aef\u7684\u6570\u636e\u3002 -- response \u51fa\u53c2\u7ed3\u6784\u4f53 \u8fd4\u56de\u7ed9\u524d\u7aef\u7684\u6570\u636e\u7ed3\u6784\u4f53 -- v1 api\u5c42 api\u5c42v1\u7248\u672c\u4ee3\u7801 - middleware \u4e2d\u95f4\u4ef6 \u7528\u4e8e\u8def\u7531\u5c42\u7684\u4e2d\u95f4\u4ef6\u5b58\u653e\u6587\u4ef6\u5939 - model \u6570\u636e\u6a21\u578b \u6570\u636e\u7ba1\u7406\u5c42\uff0c\u4ec5\u7528\u4e8e\u64cd\u4f5c\u7ba1\u7406\u6570\u636e\uff0c\u5982\u6570\u636e\u5e93\u64cd\u4f5c\u3002 - service \u903b\u8f91\u5c01\u88c5 \u4e1a\u52a1\u903b\u8f91\u5c01\u88c5\u5c42\uff0c\u5b9e\u73b0\u7279\u5b9a\u7684\u4e1a\u52a1\u9700\u6c42\uff0c\u53ef\u4f9b\u4e0d\u540c\u7684\u5305\u8c03\u7528\u3002 boot \u521d\u59cb\u5316\u5305 \u7528\u4e8e\u9879\u76ee\u521d\u59cb\u5316\u53c2\u6570\u8bbe\u7f6e\uff0c\u5f80\u5f80\u4f5c\u4e3a main.go \u4e2d\u7b2c\u4e00\u4e2a\u88ab import \u7684\u5305\u3002 config \u914d\u7f6e\u7ba1\u7406 \u6240\u6709\u7684\u914d\u7f6e\u6587\u4ef6\u5b58\u653e\u76ee\u5f55\u3002 db \u521d\u59cb\u6570\u636e \u5b58\u653e\u9879\u76ee\u7684\u521d\u59cb\u6570\u636e library \u516c\u5171\u5e93\u5305 \u516c\u5171\u7684\u529f\u80fd\u5c01\u88c5\u5305\uff0c\u5f80\u5f80\u4e0d\u5305\u542b\u4e1a\u52a1\u9700\u6c42\u5b9e\u73b0\u3002 - gdbadapter gdb\u9002\u914d\u5668 GoFrame\u9002\u914d\u5668\u5de5\u5177\u7c7b - global json\u8fd4\u56de\u5c01\u88c5 json\u8fd4\u56deweb\u7aef\u7684\u7edf\u4e00\u5c01\u88c5 - utils \u5de5\u5177\u7c7b \u4e00\u4e9b\u5e38\u7528\u7684\u5de5\u5177\u7c7b\u5c01\u88c5 logs glog\u65e5\u5fd7 glog\u4f1a\u81ea\u884c\u5224\u65ad\u662f\u5426\u5b58\u5728\u6b64\u76ee\u5f55,\u65e0\u4f1a\u81ea\u52a8\u521b\u5efa - log \u666e\u901a\u65e5\u5fd7 \u666e\u901a\u65e5\u5fd7 - server \u670d\u52a1\u5668\u65e5\u5fd7 server\u65e5\u5fd7 - sql \u6570\u636e\u5e93\u65e5\u5fd7 \u5b58\u653emysql\u4ea7\u751flog\u7684sql\u65e5\u5fd7 packed \u6253\u5305\u76ee\u5f55 \u5c06\u8d44\u6e90\u6587\u4ef6\u6253\u5305\u7684 Go \u6587\u4ef6\u5b58\u653e\u5728\u8fd9\u91cc\uff0c boot \u5305\u521d\u59cb\u5316\u65f6\u4f1a\u81ea\u52a8\u8c03\u7528\u3002 public \u9759\u6001\u76ee\u5f55 \u4ec5\u6709\u8be5\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u624d\u80fd\u5bf9\u5916\u63d0\u4f9b\u9759\u6001\u670d\u52a1\u8bbf\u95ee\u3002 router \u8def\u7531\u6ce8\u518c \u7528\u4e8e\u8def\u7531\u7edf\u4e00\u7684\u6ce8\u518c\u7ba1\u7406\u3002 template \u6a21\u677f\u6587\u4ef6 \u5b58\u653e\u81ea\u52a8\u5316\u4ee3\u7801\u6e32\u67d3\u6a21\u677f Dockerfile \u955c\u50cf\u63cf\u8ff0 \u4e91\u539f\u751f\u65f6\u4ee3\u7528\u4e8e\u7f16\u8bd1\u751f\u6210Docker\u955c\u50cf\u7684\u63cf\u8ff0\u6587\u4ef6\u3002 go.mod \u4f9d\u8d56\u7ba1\u7406 \u4f7f\u7528 Go Module \u5305\u7ba1\u7406\u7684\u4f9d\u8d56\u63cf\u8ff0\u6587\u4ef6\u3002 main.go \u5165\u53e3\u6587\u4ef6 \u7a0b\u5e8f\u5165\u53e3\u6587\u4ef6\u3002","title":"\u76ee\u5f55\u7ed3\u6784"},{"location":"Manual/directory/#_1","text":"","title":"\u76ee\u5f55\u7ed3\u6784"},{"location":"Manual/directory/#web","text":"\u2514\u2500web \u251c\u2500\u2500 public \u2514\u2500\u2500 src \u251c\u2500\u2500 api \u251c\u2500\u2500 assets \u251c\u2500\u2500 components \u251c\u2500\u2500 directive \u251c\u2500\u2500 router \u251c\u2500\u2500 store \u251c\u2500\u2500 style \u251c\u2500\u2500 utils \u2514\u2500\u2500 view","title":"web \u76ee\u5f55\u7ed3\u6784"},{"location":"Manual/directory/#web_1","text":"\u76ee\u5f55/\u6587\u4ef6\u540d\u79f0 \u8bf4\u660e \u63cf\u8ff0 public \u53d1\u5e03\u6a21\u677f src \u6e90\u7801\u5305 - api \u5411\u540e\u53f0\u53d1\u9001ajax\u7684\u5c01\u88c5\u5c42 - assets \u9759\u6001\u6587\u4ef6 - components \u7ec4\u4ef6 - router \u524d\u7aef\u8def\u7531 - store vuex \u72b6\u6001\u7ba1\u7406\u4ed3 - style \u901a\u7528\u6837\u5f0f\u6587\u4ef6 - utils \u524d\u7aef\u5de5\u5177\u5e93 - view \u524d\u7aef\u9875\u9762","title":"web \u76ee\u5f55\u7ed3\u6784\u8be6\u89e3"},{"location":"Manual/directory/#server","text":"\u251c\u2500\u2500 server \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 api \u2502 \u2502 \u251c\u2500\u2500 request \u2502 \u2502 \u251c\u2500\u2500 response \u2502 \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 middleware \u2502 \u251c\u2500\u2500 model \u2502 \u2514\u2500\u2500 service \u251c\u2500\u2500 boot \u251c\u2500\u2500 config \u251c\u2500\u2500 db \u251c\u2500\u2500 library \u2502 \u251c\u2500\u2500 gdbadapter \u2502 \u251c\u2500\u2500 global \u2502 \u2514\u2500\u2500 utils \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 log \u2502 \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 sql \u251c\u2500\u2500 packed \u251c\u2500\u2500 public \u251c\u2500\u2500 router \u2514\u2500\u2500 template \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 go.mod \u2514\u2500\u2500 main.go","title":"server \u76ee\u5f55\u7ed3\u6784"},{"location":"Manual/directory/#server_1","text":"\u76ee\u5f55/\u6587\u4ef6\u540d\u79f0 \u8bf4\u660e \u63cf\u8ff0 app \u4e1a\u52a1\u903b\u8f91\u5c42 \u6240\u6709\u7684\u4e1a\u52a1\u903b\u8f91\u5b58\u653e\u76ee\u5f55\u3002 - api \u4e1a\u52a1\u63a5\u53e3 \u63a5\u6536/\u89e3\u6790\u7528\u6237\u8f93\u5165\u53c2\u6570\u7684\u5165\u53e3/\u63a5\u53e3\u5c42\u3002 -- request \u5165\u53c2\u7ed3\u6784\u4f53 \u63a5\u6536\u524d\u7aef\u53d1\u9001\u5230\u540e\u7aef\u7684\u6570\u636e\u3002 -- response \u51fa\u53c2\u7ed3\u6784\u4f53 \u8fd4\u56de\u7ed9\u524d\u7aef\u7684\u6570\u636e\u7ed3\u6784\u4f53 -- v1 api\u5c42 api\u5c42v1\u7248\u672c\u4ee3\u7801 - middleware \u4e2d\u95f4\u4ef6 \u7528\u4e8e\u8def\u7531\u5c42\u7684\u4e2d\u95f4\u4ef6\u5b58\u653e\u6587\u4ef6\u5939 - model \u6570\u636e\u6a21\u578b \u6570\u636e\u7ba1\u7406\u5c42\uff0c\u4ec5\u7528\u4e8e\u64cd\u4f5c\u7ba1\u7406\u6570\u636e\uff0c\u5982\u6570\u636e\u5e93\u64cd\u4f5c\u3002 - service \u903b\u8f91\u5c01\u88c5 \u4e1a\u52a1\u903b\u8f91\u5c01\u88c5\u5c42\uff0c\u5b9e\u73b0\u7279\u5b9a\u7684\u4e1a\u52a1\u9700\u6c42\uff0c\u53ef\u4f9b\u4e0d\u540c\u7684\u5305\u8c03\u7528\u3002 boot \u521d\u59cb\u5316\u5305 \u7528\u4e8e\u9879\u76ee\u521d\u59cb\u5316\u53c2\u6570\u8bbe\u7f6e\uff0c\u5f80\u5f80\u4f5c\u4e3a main.go \u4e2d\u7b2c\u4e00\u4e2a\u88ab import \u7684\u5305\u3002 config \u914d\u7f6e\u7ba1\u7406 \u6240\u6709\u7684\u914d\u7f6e\u6587\u4ef6\u5b58\u653e\u76ee\u5f55\u3002 db \u521d\u59cb\u6570\u636e \u5b58\u653e\u9879\u76ee\u7684\u521d\u59cb\u6570\u636e library \u516c\u5171\u5e93\u5305 \u516c\u5171\u7684\u529f\u80fd\u5c01\u88c5\u5305\uff0c\u5f80\u5f80\u4e0d\u5305\u542b\u4e1a\u52a1\u9700\u6c42\u5b9e\u73b0\u3002 - gdbadapter gdb\u9002\u914d\u5668 GoFrame\u9002\u914d\u5668\u5de5\u5177\u7c7b - global json\u8fd4\u56de\u5c01\u88c5 json\u8fd4\u56deweb\u7aef\u7684\u7edf\u4e00\u5c01\u88c5 - utils \u5de5\u5177\u7c7b \u4e00\u4e9b\u5e38\u7528\u7684\u5de5\u5177\u7c7b\u5c01\u88c5 logs glog\u65e5\u5fd7 glog\u4f1a\u81ea\u884c\u5224\u65ad\u662f\u5426\u5b58\u5728\u6b64\u76ee\u5f55,\u65e0\u4f1a\u81ea\u52a8\u521b\u5efa - log \u666e\u901a\u65e5\u5fd7 \u666e\u901a\u65e5\u5fd7 - server \u670d\u52a1\u5668\u65e5\u5fd7 server\u65e5\u5fd7 - sql \u6570\u636e\u5e93\u65e5\u5fd7 \u5b58\u653emysql\u4ea7\u751flog\u7684sql\u65e5\u5fd7 packed \u6253\u5305\u76ee\u5f55 \u5c06\u8d44\u6e90\u6587\u4ef6\u6253\u5305\u7684 Go \u6587\u4ef6\u5b58\u653e\u5728\u8fd9\u91cc\uff0c boot \u5305\u521d\u59cb\u5316\u65f6\u4f1a\u81ea\u52a8\u8c03\u7528\u3002 public \u9759\u6001\u76ee\u5f55 \u4ec5\u6709\u8be5\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u624d\u80fd\u5bf9\u5916\u63d0\u4f9b\u9759\u6001\u670d\u52a1\u8bbf\u95ee\u3002 router \u8def\u7531\u6ce8\u518c \u7528\u4e8e\u8def\u7531\u7edf\u4e00\u7684\u6ce8\u518c\u7ba1\u7406\u3002 template \u6a21\u677f\u6587\u4ef6 \u5b58\u653e\u81ea\u52a8\u5316\u4ee3\u7801\u6e32\u67d3\u6a21\u677f Dockerfile \u955c\u50cf\u63cf\u8ff0 \u4e91\u539f\u751f\u65f6\u4ee3\u7528\u4e8e\u7f16\u8bd1\u751f\u6210Docker\u955c\u50cf\u7684\u63cf\u8ff0\u6587\u4ef6\u3002 go.mod \u4f9d\u8d56\u7ba1\u7406 \u4f7f\u7528 Go Module \u5305\u7ba1\u7406\u7684\u4f9d\u8d56\u63cf\u8ff0\u6587\u4ef6\u3002 main.go \u5165\u53e3\u6587\u4ef6 \u7a0b\u5e8f\u5165\u53e3\u6587\u4ef6\u3002","title":"server \u76ee\u5f55\u7ed3\u6784\u8be6\u89e3"},{"location":"about/","text":"FLIPPED-AURORA \u9879\u76ee\u7ec4\u6210\u5458 \u848b \u5c39 \u4e25 \u675c \u5370 \u5b8b \u8d56 \u5362 \u6635\u79f0 \u9879\u76ee\u804c\u52a1 \u59d3 @piexlmax \u9879\u76ee\u53d1\u8d77\u8005 \u848b @granty1 \u540e\u53f0\u5f00\u53d1 \u5370 @Ruio9244 \u5168\u6808\u5f00\u53d1 \u4e25 @1319612909 \u524d\u7aefUI\u5f00\u53d1 \u675c @krank666 \u524d\u7aef\u5f00\u53d1 \u5c39 @chen-chen-up \u65b0\u624b\u5f00\u53d1 \u5b8b @SliverHorn \u793e\u533a\u7ba1\u7406\u5458 \u8d56 @LLemonGreen \u6587\u6863\u7f16\u7e82\u5458 \u5362","title":"About"},{"location":"about/#_1","text":"\u848b \u5c39 \u4e25 \u675c \u5370 \u5b8b \u8d56 \u5362 \u6635\u79f0 \u9879\u76ee\u804c\u52a1 \u59d3 @piexlmax \u9879\u76ee\u53d1\u8d77\u8005 \u848b @granty1 \u540e\u53f0\u5f00\u53d1 \u5370 @Ruio9244 \u5168\u6808\u5f00\u53d1 \u4e25 @1319612909 \u524d\u7aefUI\u5f00\u53d1 \u675c @krank666 \u524d\u7aef\u5f00\u53d1 \u5c39 @chen-chen-up \u65b0\u624b\u5f00\u53d1 \u5b8b @SliverHorn \u793e\u533a\u7ba1\u7406\u5458 \u8d56 @LLemonGreen \u6587\u6863\u7f16\u7e82\u5458 \u5362","title":"\u9879\u76ee\u7ec4\u6210\u5458"},{"location":"jwt/","text":"Json Web Token 1.\u914d\u7f6e Name Type Example Description Realm string \"test zhou\" \u663e\u793a\u7ed9\u7528\u6237\u7684\u9886\u57df\u540d\u79f0,\u5fc5\u987b\u7684 SigningAlgorithm string \"HS256\" \u7b7e\u540d\u7b97\u6cd5-\u53ef\u80fd\u7684\u503c\u4e3aHS256\uff0cHS384\uff0cHS512\uff0c\u53ef\u9009\uff0c\u9ed8\u8ba4\u503c\u4e3aHS256\u3002 Key []byte []byte(\"secret key\") \u7528\u4e8e\u7b7e\u540d\u7684\u5bc6\u94a5,\u5fc5\u987b\u7684. Timeout time.Duration time.Minute * 5 jwt\u4ee4\u724c\u6709\u6548\u7684\u6301\u7eed\u65f6\u95f4\u3002\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a\u4e00\u5c0f\u65f6\u3002 MaxRefresh time.Duration time.Minute * 5 \u8be5\u5b57\u6bb5\u5141\u8bb8\u5ba2\u6237\u7aef\u5237\u65b0\u4ee4\u724c\uff0c\u76f4\u5230MaxRefresh\u901a\u8fc7\u3002 \u8bf7\u6ce8\u610f\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u5728MaxRefresh\u7684\u6700\u540e\u65f6\u523b\u5237\u65b0\u5176\u4ee4\u724c\u3002 \u8fd9\u610f\u5473\u7740\u4ee4\u724c\u7684\u6700\u5927\u6709\u6548\u65f6\u95f4\u8de8\u5ea6\u4e3aTokenTime + MaxRefresh\u3002 \u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a0\uff0c\u8868\u793a\u4e0d\u53ef\u5237\u65b0\u3002 IdentityKey string \"id\" \u8bbe\u7f6e\u8eab\u4efd\u5bc6\u94a5 TokenLookup string \"header: Authorization, query: token, cookie: jwt\" TokenLookup\u662f\" : \"\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u4ece\u8bf7\u6c42\u4e2d\u63d0\u53d6\u4ee4\u724c,\u53ef\u9009\u7684\u3002 \u9ed8\u8ba4\u503c\"header:Authorization\". \u53ef\u80fd\u7684\u503c\uff1a - \"header: \" - \"query: \" - \"cookie: \" TokenHeadName string \"Bearer\" TokenHeadName\u662f\u6807\u9898\u4e2d\u7684\u5b57\u7b26\u4e32\u3002\u9ed8\u8ba4\u503c\u4e3a\"Bearer\" PrivKeyFile string \u975e\u5bf9\u79f0\u7b97\u6cd5\u7684\u79c1\u94a5\u6587\u4ef6 PubKeyFile string \u975e\u5bf9\u79f0\u7b97\u6cd5\u7684\u516c\u94a5\u6587\u4ef6 SendCookie bool (\u53ef\u9009)\u5c06\u4ee4\u724c\u4f5c\u4e3aCookie\u8fd4\u56de SecureCookie bool \u5141\u8bb8\u4e0d\u5b89\u5168\u7684Cookie\u901a\u8fc7HTTP\u8fdb\u884c\u5f00\u53d1 CookieHTTPOnly bool \u5141\u8bb8\u8bbf\u95ee\u5ba2\u6237\u7aef\u7684Cookie\u8fdb\u884c\u5f00\u53d1 CookieDomain string \u5141\u8bb8\u66f4\u6539Cookie\u57df\u4ee5\u8fdb\u884c\u5f00\u53d1 SendAuthorization bool SendAuthorization\u5141\u8bb8\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u8fd4\u56de\u6388\u6743\u6807\u5934 DisabledAbort bool \u7981\u7528\u4e0a\u4e0b\u6587\u7684abort() CookieName string CookieName\u5141\u8bb8\u66f4\u6539Cookie\u540d\u79f0\u4ee5\u8fdb\u884c\u5f00\u53d1 \u914d\u7f6e\u540d \u7c7b\u578b \u793a\u4f8b \u4e2d\u6587\u63cf\u8ff0 Realm string \"test zhou\" \u8981\u663e\u793a\u7ed9\u7528\u6237\u7684\u9886\u57df\u540d\u79f0,\u5fc5\u987b\u4f20\u9012\u7684\u53c2\u6570 SigningAlgorithm string \u7b7e\u540d\u7b97\u6cd5-\u53ef\u80fd\u7684\u503c\u4e3aHS256\u3001HS384\u3001HS512\uff0c\u53ef\u9009\uff0c\u9ed8\u8ba4\u503c\u4e3aHS256 Key []byte []byte(\"secret key\") Timeout time.Duration time.Minute * 5 token\u8fc7\u671f\u65f6\u95f4 MaxRefresh time.Duration time.Minute * 5 IdentityKey string \"id\" \u8eab\u4efd\u9a8c\u8bc1\u7684key\u503c TokenLookup string \"header: Authorization, query: token, cookie: jwt\" token\u68c0\u7d22\u6a21\u5f0f\uff0c\u7528\u4e8e\u63d0\u53d6token-> Authorization TokenHeadName string \"Bearer\" token\u5728\u8bf7\u6c42\u5934\u65f6\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u503c\u4e3aBearer.\u5ba2\u6237\u7aef\u5728header\u4e2d\u4f20\u5165Authorization \u5bf9\u4e00\u4e2a\u503c\u662fBearer + \u7a7a\u683c + token TimeFunc func() time.Time time.Now \u6d4b\u8bd5\u6216\u670d\u52a1\u5668\u5728\u5176\u4ed6\u65f6\u533a\u53ef\u8bbe\u7f6e\u8be5\u5c5e\u6027 Authenticator func(r *ghttp.Request) (interface{}, error) Authenticator \u6839\u636e\u767b\u5f55\u4fe1\u606f\u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u56de\u8c03\u51fd\u6570 Authorizator func(data interface{}, r *ghttp.Request) bool \u56de\u8c03\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5e94\u6267\u884c\u5df2\u9a8c\u8bc1\u7528\u6237\u7684\u6388\u6743\u3002\u4ec5\u5728\u8eab\u4efd\u9a8c\u8bc1\u6210\u529f\u540e\u8c03\u7528\u3002\u6210\u529f\u65f6\u5fc5\u987b\u8fd4\u56detrue\uff0c\u5931\u8d25\u65f6\u8fd4\u56defalse\u3002\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a\u6210\u529f LoginResponse LoginResponse \u5b8c\u6210\u767b\u5f55\u540e\u8fd4\u56de\u7684\u4fe1\u606f\uff0c\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u8fd4\u56de\u6570\u636e\uff0c\u9ed8\u8ba4\u8fd4\u56de RefreshResponse auth.RefreshResponse \u5237\u65b0token\u540e\u8fd4\u56de\u7684\u4fe1\u606f\uff0c\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u8fd4\u56de\u6570\u636e\uff0c\u9ed8\u8ba4\u8fd4\u56de Unauthorized auth.Unauthorized \u5904\u7406\u4e0d\u8fdb\u884c\u6388\u6743\u7684\u903b\u8f91 IdentityHandler auth.IdentityHandler \u89e3\u6790\u5e76\u8bbe\u7f6e\u7528\u6237\u8eab\u4efd\u4fe1\u606f PayloadFunc auth.PayloadFunc \u767b\u5f55\u671f\u95f4\u7684\u56de\u8c03\u7684\u51fd\u6570 2. \u56de\u8c03\u51fd\u6570\u914d\u7f6e 2.1 Authenticator Type:==func(r *ghttp.Request) (interface{}, error)== Description: \u6839\u636e\u767b\u5f55\u4fe1\u606f\u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u56de\u8c03\u51fd\u6570\u3002 \u5fc5\u987b\u8fd4\u56de\u7528\u6237\u6570\u636e\u4f5c\u4e3a\u7528\u6237\u6807\u8bc6\u7b26\uff0c\u5b83\u5c06\u5b58\u50a8\u5728\u7d22\u8d54\u6570\u7ec4\u4e2d\u3002\u5fc5\u987b\u7684\u3002 \u68c0\u67e5\u9519\u8bef(e)\u4ee5\u786e\u5b9a\u9002\u5f53\u7684\u9519\u8bef\u4fe1\u606f. 2.2 Authorizator Type:==func(data interface{}, r *ghttp.Request) bool== Description: \u56de\u8c03\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5e94\u6267\u884c\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u6388\u6743\u3002 \u4ec5\u5728\u8eab\u4efd\u9a8c\u8bc1\u6210\u529f\u540e\u8c03\u7528. \u6210\u529f\u65f6\u5fc5\u987b\u8fd4\u56detrue\uff0c\u5931\u8d25\u65f6\u5fc5\u987b\u8fd4\u56defalse. \u53ef\u9009\uff0c\u9ed8\u8ba4success. 2.3 PayloadFunc Type:==func(data interface{}) MapClaims== Description: \u5728\u767b\u5f55\u671f\u95f4\u5c06\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002 \u4f7f\u7528\u6b64\u529f\u80fd\u53ef\u4ee5\u5411\u7f51\u7edc\u4ee4\u724c\u6dfb\u52a0\u5176\u4ed6\u6709\u6548\u8d1f\u8f7d\u6570\u636e\u3002 \u7136\u540e\u5728\u8bf7\u6c42\u671f\u95f4\u901a\u8fc7c.Get(\" JWT_PAYLOAD\")\u4f7f\u6570\u636e\u53ef\u7528\u3002 \u8bf7\u6ce8\u610f\uff0c\u6709\u6548\u8d1f\u8f7d\u672a\u52a0\u5bc6\u3002 jwt.io\u4e0a\u63d0\u5230\u7684\u5c5e\u6027\u4e0d\u80fd\u7528\u4f5c\u5730\u56fe\u7684\u952e\u3002 \u53ef\u9009\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u8bbe\u7f6e\u5176\u4ed6\u6570\u636e\u3002 2.4 Unauthorized Type:==func(*ghttp.Request, int, string)== Description: \u7528\u6237\u53ef\u4ee5\u5b9a\u4e49\u81ea\u5df1\u7684\u672a\u7ecf\u6388\u6743\u7684\u529f\u80fd\u3002 2.5 LoginResponse Type:==func(*ghttp.Request, int, string, time.Time)== Description: \u7528\u6237\u53ef\u4ee5\u5b9a\u4e49\u81ea\u5df1\u7684LoginResponse\u51fd\u6570\u3002 2.6 RefreshResponse Type:==func(*ghttp.Request, int, string, time.Time)== Description: \u7528\u6237\u53ef\u4ee5\u5b9a\u4e49\u81ea\u5df1\u7684 RefreshResponse \u51fd\u6570. 2.7 IdentityHandler Type:==func(*ghttp.Request) interface{}== Description: \u8bbe\u7f6e\u8eab\u4efd\u5904\u7406\u7a0b\u5e8f\u529f\u80fd 3.\u793a\u4f8b\u4ee3\u7801 // \u793a\u4f8b\u4ee3\u7801 package v1 import ( jwt \"github.com/gogf/gf-jwt\" \"github.com/gogf/gf/frame/g\" \"github.com/gogf/gf/net/ghttp\" \"github.com/gogf/gf/os/glog\" \"github.com/gogf/gf/util/gvalid\" \"net/http\" \"time\" ) var ( // \u5e95\u5c42JWT\u4e2d\u95f4\u4ef6. GfJWTMiddleware *jwt.GfJWTMiddleware // \u81ea\u5b9a\u4e49\u767b\u5f55\u53c2\u6570\u9a8c\u8bc1\u89c4\u5219. ValidationRules = g.Map { \"username\": \"required\", \"password\": \"required\", } ) // \u521d\u59cb\u5316\u51fd\u6570\uff0c // \u91cd\u5199\u6b64\u51fd\u6570\u4ee5\u81ea\u5b9a\u4e49\u60a8\u81ea\u5df1\u7684JWT\u8bbe\u7f6e\u3002 func init() { authMiddleware, err := jwt.New(&jwt.GfJWTMiddleware{ Realm: \"test zone\", Key: []byte(\"secret key\"), Timeout: time.Minute * 5, MaxRefresh: time.Minute * 5, IdentityKey: \"id\", TokenLookup: \"header: Authorization, query: token, cookie: jwt\", TokenHeadName: \"Bearer\", TimeFunc: time.Now, Authenticator: Authenticator, LoginResponse: LoginResponse, RefreshResponse: RefreshResponse, Unauthorized: Unauthorized, IdentityHandler: IdentityHandler, PayloadFunc: PayloadFunc, }) if err != nil { glog.Fatal(\"JWT Error:\" + err.Error()) } GfJWTMiddleware = authMiddleware } // PayloadFunc \u662f\u5c06\u5728\u767b\u5f55\u671f\u95f4\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002 // \u4f7f\u7528\u6b64\u51fd\u6570\u53ef\u4ee5\u5411webtoken\u6dfb\u52a0\u989d\u5916\u7684\u6709\u6548\u8d1f\u8f7d\u6570\u636e\u3002 // \u7136\u540e\uff0c\u5728\u901a\u8fc7c.Get\uff08\u201cJWT_PAYLOAD\u201d\uff09\u8bf7\u6c42\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u3002 // \u8bf7\u6ce8\u610f\uff0c\u6709\u6548\u8d1f\u8f7d\u6ca1\u6709\u52a0\u5bc6\u3002 // \u4e0a\u9762\u63d0\u5230\u7684\u5c5e\u6027\u667a\u5a01\u6c64\u900a\u4e0d\u80fd\u7528\u4f5c\u5730\u56fe\u7684\u952e\u3002 // \u53ef\u9009\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u8bbe\u7f6e\u5176\u4ed6\u6570\u636e\u3002 func PayloadFunc(data interface{}) jwt.MapClaims { claims := jwt.MapClaims{} params := data.(map[string]interface{}) if len(params) > 0 { for k, v := range params { claims[k] = v } } return claims } // IdentityHandler \u8bbe\u7f6eJWT\u7684\u6807\u8bc6\u3002 func IdentityHandler(r *ghttp.Request) interface{} { claims := jwt.ExtractClaims(r) return claims[\"id\"] } // Unauthorized \u7528\u4e8e\u5b9a\u4e49\u81ea\u5b9a\u4e49\u7684\u672a\u6388\u6743\u56de\u8c03\u51fd\u6570\u3002 func Unauthorized(r *ghttp.Request, code int, message string) { r.Response.WriteJson(g.Map{ \"code\": code, \"msg\": message, }) r.ExitAll() } // LoginResponse \u7528\u4e8e\u5b9a\u4e49\u81ea\u5b9a\u4e49\u767b\u5f55\u6210\u529f\u56de\u8c03\u51fd\u6570\u3002 func LoginResponse(r *ghttp.Request, code int, token string, expire time.Time) { r.Response.WriteJson(g.Map{ \"code\": http.StatusOK, \"token\": token, \"expire\": expire.Format(time.RFC3339), }) r.ExitAll() } // RefreshResponse \u7528\u4e8e\u83b7\u53d6\u65b0\u4ee4\u724c\uff0c\u65e0\u8bba\u5f53\u524d\u4ee4\u724c\u662f\u5426\u8fc7\u671f\u3002 func RefreshResponse(r *ghttp.Request, code int, token string, expire time.Time) { r.Response.WriteJson(g.Map{ \"code\": http.StatusOK, \"token\": token, \"expire\": expire.Format(time.RFC3339), }) r.ExitAll() } // Authenticator \u7528\u4e8e\u9a8c\u8bc1\u767b\u5f55\u53c2\u6570\u3002 // \u5b83\u5fc5\u987b\u8fd4\u56de\u7528\u6237\u6570\u636e\u4f5c\u4e3a\u7528\u6237\u6807\u8bc6\u7b26\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728Claim Array\u4e2d\u3002 // \u68c0\u67e5\u9519\u8bef\uff08e\uff09\uff0c\u4ee5\u786e\u5b9a\u9002\u5f53\u7684\u9519\u8bef\u6d88\u606f\u3002 func Authenticator(r *ghttp.Request) (interface{}, error) { data := r.GetMap() if e := gvalid.CheckMap(data, ValidationRules); e != nil { return \"\", jwt.ErrFailedAuthentication } if data[\"username\"] == \"admin\" && data[\"password\"] == \"admin\" { return g.Map { \"username\": data[\"username\"], \"id\": data[\"username\"], }, nil } return nil, jwt.ErrFailedAuthentication } Json Web Token In English 1.Simple configuration Name Type Example Description Realm string \"test zhou\" Realm name to display to the user. Required. SigningAlgorithm string \"HS256\" signing algorithm - possible values are HS256, HS384, HS512 ,Optional, default is HS256. Key []byte []byte(\"secret key\") Secret key used for signing. Required. Timeout time.Duration time.Minute * 5 Duration that a jwt token is valid. Optional, defaults to one hour. MaxRefresh time.Duration time.Minute * 5 This field allows clients to refresh their token until MaxRefresh has passed. Note that clients can refresh their token in the last moment of MaxRefresh. This means that the maximum validity timespan for a token is TokenTime + MaxRefresh. Optional, defaults to 0 meaning not refreshable. IdentityKey string \"id\" Set the identity key TokenLookup string \"header: Authorization, query: token, cookie: jwt\" TokenLookup is a string in the form of \" : \" that is used to extract token from the request. // Optional. Default value \"header:Authorization\". Possible values: \"header: \" \"query: \" \"cookie: \" TokenHeadName string \"Bearer\" TokenHeadName is a string in the header. Default value is \"Bearer\" PrivKeyFile string Private key file for asymmetric algorithms PubKeyFile string Public key file for asymmetric algorithms SendCookie bool Optionally return the token as a cookie SecureCookie bool Allow insecure cookies for development over http CookieHTTPOnly bool Allow cookies to be accessed client side for development CookieDomain string Allow cookie domain change for development SendAuthorization bool SendAuthorization allow return authorization header for every request DisabledAbort bool Disable abort() of context. CookieName string CookieName allow cookie name change for development 2. Callback function 2.1 Authenticator Type:==func(r *ghttp.Request) (interface{}, error)== Description: Callback function that should perform the authentication of the user based on login info. Must return user data as user identifier, it will be stored in Claim Array. Required. Check error (e) to determine the appropriate error message. 2.2 Authorizator Type:==func(data interface{}, r *ghttp.Request) bool== Description: Callback function that should perform the authorization of the authenticated user. Called only after an authentication success. Must return true on success, false on failure. Optional, default to success. 2.3 PayloadFunc Type:==func(data interface{}) MapClaims== Description: Callback function that will be called during login. Using this function it is possible to add additional payload data to the webtoken. The data is then made available during requests via c.Get(\"JWT_PAYLOAD\"). Note that the payload is not encrypted. The attributes mentioned on jwt.io can't be used as keys for the map. Optional, by default no additional data will be set. 2.4 Unauthorized Type:==func(*ghttp.Request, int, string)== Description: User can define own Unauthorized func. 2.5 LoginResponse Type:==func(*ghttp.Request, int, string, time.Time)== Description: User can define own LoginResponse func. 2.6 RefreshResponse Type:==func(*ghttp.Request, int, string, time.Time)== Description: User can define own RefreshResponse func. 2.7 IdentityHandler Type:==func(*ghttp.Request) interface{}== Description: Set the identity handler function 3. Sample code package auth import ( jwt \"github.com/gogf/gf-jwt\" \"github.com/gogf/gf/frame/g\" \"github.com/gogf/gf/net/ghttp\" \"github.com/gogf/gf/os/glog\" \"github.com/gogf/gf/util/gvalid\" \"net/http\" \"time\" ) var ( // The underlying JWT middleware. GfJWTMiddleware *jwt.GfJWTMiddleware // Customized login parameter validation rules. ValidationRules = g.Map { \"username\": \"required\", \"password\": \"required\", } ) // Initialization function, // rewrite this function to customized your own JWT settings. func init() { authMiddleware, err := jwt.New(&jwt.GfJWTMiddleware{ Realm: \"test zone\", Key: []byte(\"secret key\"), Timeout: time.Minute * 5, MaxRefresh: time.Minute * 5, IdentityKey: \"id\", TokenLookup: \"header: Authorization, query: token, cookie: jwt\", TokenHeadName: \"Bearer\", TimeFunc: time.Now, Authenticator: Authenticator, LoginResponse: LoginResponse, RefreshResponse: RefreshResponse, Unauthorized: Unauthorized, IdentityHandler: IdentityHandler, PayloadFunc: PayloadFunc, }) if err != nil { glog.Fatal(\"JWT Error:\" + err.Error()) } GfJWTMiddleware = authMiddleware } // PayloadFunc is a callback function that will be called during login. // Using this function it is possible to add additional payload data to the webtoken. // The data is then made available during requests via c.Get(\"JWT_PAYLOAD\"). // Note that the payload is not encrypted. // The attributes mentioned on jwt.io can't be used as keys for the map. // Optional, by default no additional data will be set. func PayloadFunc(data interface{}) jwt.MapClaims { claims := jwt.MapClaims{} params := data.(map[string]interface{}) if len(params) > 0 { for k, v := range params { claims[k] = v } } return claims } // IdentityHandler sets the identity for JWT. func IdentityHandler(r *ghttp.Request) interface{} { claims := jwt.ExtractClaims(r) return claims[\"id\"] } // Unauthorized is used to define customized Unauthorized callback function. func Unauthorized(r *ghttp.Request, code int, message string) { r.Response.WriteJson(g.Map{ \"code\": code, \"msg\": message, }) r.ExitAll() } // LoginResponse is used to define customized login-successful callback function. func LoginResponse(r *ghttp.Request, code int, token string, expire time.Time) { r.Response.WriteJson(g.Map{ \"code\": http.StatusOK, \"token\": token, \"expire\": expire.Format(time.RFC3339), }) r.ExitAll() } // RefreshResponse is used to get a new token no matter current token is expired or not. func RefreshResponse(r *ghttp.Request, code int, token string, expire time.Time) { r.Response.WriteJson(g.Map{ \"code\": http.StatusOK, \"token\": token, \"expire\": expire.Format(time.RFC3339), }) r.ExitAll() } // Authenticator is used to validate login parameters. // It must return user data as user identifier, it will be stored in Claim Array. // Check error (e) to determine the appropriate error message. func Authenticator(r *ghttp.Request) (interface{}, error) { data := r.GetMap() if e := gvalid.CheckMap(data, ValidationRules); e != nil { return \"\", jwt.ErrFailedAuthentication } if data[\"username\"] == \"admin\" && data[\"password\"] == \"admin\" { return g.Map { \"username\": data[\"username\"], \"id\": data[\"username\"], }, nil } return nil, jwt.ErrFailedAuthentication }","title":"JWT\u8be6\u89e3"},{"location":"jwt/#json-web-token","text":"","title":"Json Web Token"},{"location":"jwt/#1","text":"Name Type Example Description Realm string \"test zhou\" \u663e\u793a\u7ed9\u7528\u6237\u7684\u9886\u57df\u540d\u79f0,\u5fc5\u987b\u7684 SigningAlgorithm string \"HS256\" \u7b7e\u540d\u7b97\u6cd5-\u53ef\u80fd\u7684\u503c\u4e3aHS256\uff0cHS384\uff0cHS512\uff0c\u53ef\u9009\uff0c\u9ed8\u8ba4\u503c\u4e3aHS256\u3002 Key []byte []byte(\"secret key\") \u7528\u4e8e\u7b7e\u540d\u7684\u5bc6\u94a5,\u5fc5\u987b\u7684. Timeout time.Duration time.Minute * 5 jwt\u4ee4\u724c\u6709\u6548\u7684\u6301\u7eed\u65f6\u95f4\u3002\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a\u4e00\u5c0f\u65f6\u3002 MaxRefresh time.Duration time.Minute * 5 \u8be5\u5b57\u6bb5\u5141\u8bb8\u5ba2\u6237\u7aef\u5237\u65b0\u4ee4\u724c\uff0c\u76f4\u5230MaxRefresh\u901a\u8fc7\u3002 \u8bf7\u6ce8\u610f\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u5728MaxRefresh\u7684\u6700\u540e\u65f6\u523b\u5237\u65b0\u5176\u4ee4\u724c\u3002 \u8fd9\u610f\u5473\u7740\u4ee4\u724c\u7684\u6700\u5927\u6709\u6548\u65f6\u95f4\u8de8\u5ea6\u4e3aTokenTime + MaxRefresh\u3002 \u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a0\uff0c\u8868\u793a\u4e0d\u53ef\u5237\u65b0\u3002 IdentityKey string \"id\" \u8bbe\u7f6e\u8eab\u4efd\u5bc6\u94a5 TokenLookup string \"header: Authorization, query: token, cookie: jwt\" TokenLookup\u662f\" : \"\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u4ece\u8bf7\u6c42\u4e2d\u63d0\u53d6\u4ee4\u724c,\u53ef\u9009\u7684\u3002 \u9ed8\u8ba4\u503c\"header:Authorization\". \u53ef\u80fd\u7684\u503c\uff1a - \"header: \" - \"query: \" - \"cookie: \" TokenHeadName string \"Bearer\" TokenHeadName\u662f\u6807\u9898\u4e2d\u7684\u5b57\u7b26\u4e32\u3002\u9ed8\u8ba4\u503c\u4e3a\"Bearer\" PrivKeyFile string \u975e\u5bf9\u79f0\u7b97\u6cd5\u7684\u79c1\u94a5\u6587\u4ef6 PubKeyFile string \u975e\u5bf9\u79f0\u7b97\u6cd5\u7684\u516c\u94a5\u6587\u4ef6 SendCookie bool (\u53ef\u9009)\u5c06\u4ee4\u724c\u4f5c\u4e3aCookie\u8fd4\u56de SecureCookie bool \u5141\u8bb8\u4e0d\u5b89\u5168\u7684Cookie\u901a\u8fc7HTTP\u8fdb\u884c\u5f00\u53d1 CookieHTTPOnly bool \u5141\u8bb8\u8bbf\u95ee\u5ba2\u6237\u7aef\u7684Cookie\u8fdb\u884c\u5f00\u53d1 CookieDomain string \u5141\u8bb8\u66f4\u6539Cookie\u57df\u4ee5\u8fdb\u884c\u5f00\u53d1 SendAuthorization bool SendAuthorization\u5141\u8bb8\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u8fd4\u56de\u6388\u6743\u6807\u5934 DisabledAbort bool \u7981\u7528\u4e0a\u4e0b\u6587\u7684abort() CookieName string CookieName\u5141\u8bb8\u66f4\u6539Cookie\u540d\u79f0\u4ee5\u8fdb\u884c\u5f00\u53d1 \u914d\u7f6e\u540d \u7c7b\u578b \u793a\u4f8b \u4e2d\u6587\u63cf\u8ff0 Realm string \"test zhou\" \u8981\u663e\u793a\u7ed9\u7528\u6237\u7684\u9886\u57df\u540d\u79f0,\u5fc5\u987b\u4f20\u9012\u7684\u53c2\u6570 SigningAlgorithm string \u7b7e\u540d\u7b97\u6cd5-\u53ef\u80fd\u7684\u503c\u4e3aHS256\u3001HS384\u3001HS512\uff0c\u53ef\u9009\uff0c\u9ed8\u8ba4\u503c\u4e3aHS256 Key []byte []byte(\"secret key\") Timeout time.Duration time.Minute * 5 token\u8fc7\u671f\u65f6\u95f4 MaxRefresh time.Duration time.Minute * 5 IdentityKey string \"id\" \u8eab\u4efd\u9a8c\u8bc1\u7684key\u503c TokenLookup string \"header: Authorization, query: token, cookie: jwt\" token\u68c0\u7d22\u6a21\u5f0f\uff0c\u7528\u4e8e\u63d0\u53d6token-> Authorization TokenHeadName string \"Bearer\" token\u5728\u8bf7\u6c42\u5934\u65f6\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u503c\u4e3aBearer.\u5ba2\u6237\u7aef\u5728header\u4e2d\u4f20\u5165Authorization \u5bf9\u4e00\u4e2a\u503c\u662fBearer + \u7a7a\u683c + token TimeFunc func() time.Time time.Now \u6d4b\u8bd5\u6216\u670d\u52a1\u5668\u5728\u5176\u4ed6\u65f6\u533a\u53ef\u8bbe\u7f6e\u8be5\u5c5e\u6027 Authenticator func(r *ghttp.Request) (interface{}, error) Authenticator \u6839\u636e\u767b\u5f55\u4fe1\u606f\u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u56de\u8c03\u51fd\u6570 Authorizator func(data interface{}, r *ghttp.Request) bool \u56de\u8c03\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5e94\u6267\u884c\u5df2\u9a8c\u8bc1\u7528\u6237\u7684\u6388\u6743\u3002\u4ec5\u5728\u8eab\u4efd\u9a8c\u8bc1\u6210\u529f\u540e\u8c03\u7528\u3002\u6210\u529f\u65f6\u5fc5\u987b\u8fd4\u56detrue\uff0c\u5931\u8d25\u65f6\u8fd4\u56defalse\u3002\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a\u6210\u529f LoginResponse LoginResponse \u5b8c\u6210\u767b\u5f55\u540e\u8fd4\u56de\u7684\u4fe1\u606f\uff0c\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u8fd4\u56de\u6570\u636e\uff0c\u9ed8\u8ba4\u8fd4\u56de RefreshResponse auth.RefreshResponse \u5237\u65b0token\u540e\u8fd4\u56de\u7684\u4fe1\u606f\uff0c\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u8fd4\u56de\u6570\u636e\uff0c\u9ed8\u8ba4\u8fd4\u56de Unauthorized auth.Unauthorized \u5904\u7406\u4e0d\u8fdb\u884c\u6388\u6743\u7684\u903b\u8f91 IdentityHandler auth.IdentityHandler \u89e3\u6790\u5e76\u8bbe\u7f6e\u7528\u6237\u8eab\u4efd\u4fe1\u606f PayloadFunc auth.PayloadFunc \u767b\u5f55\u671f\u95f4\u7684\u56de\u8c03\u7684\u51fd\u6570","title":"1.\u914d\u7f6e"},{"location":"jwt/#2","text":"","title":"2. \u56de\u8c03\u51fd\u6570\u914d\u7f6e"},{"location":"jwt/#21-authenticator","text":"Type:==func(r *ghttp.Request) (interface{}, error)== Description: \u6839\u636e\u767b\u5f55\u4fe1\u606f\u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u56de\u8c03\u51fd\u6570\u3002 \u5fc5\u987b\u8fd4\u56de\u7528\u6237\u6570\u636e\u4f5c\u4e3a\u7528\u6237\u6807\u8bc6\u7b26\uff0c\u5b83\u5c06\u5b58\u50a8\u5728\u7d22\u8d54\u6570\u7ec4\u4e2d\u3002\u5fc5\u987b\u7684\u3002 \u68c0\u67e5\u9519\u8bef(e)\u4ee5\u786e\u5b9a\u9002\u5f53\u7684\u9519\u8bef\u4fe1\u606f.","title":"2.1 Authenticator"},{"location":"jwt/#22-authorizator","text":"Type:==func(data interface{}, r *ghttp.Request) bool== Description: \u56de\u8c03\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5e94\u6267\u884c\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u6388\u6743\u3002 \u4ec5\u5728\u8eab\u4efd\u9a8c\u8bc1\u6210\u529f\u540e\u8c03\u7528. \u6210\u529f\u65f6\u5fc5\u987b\u8fd4\u56detrue\uff0c\u5931\u8d25\u65f6\u5fc5\u987b\u8fd4\u56defalse. \u53ef\u9009\uff0c\u9ed8\u8ba4success.","title":"2.2 Authorizator"},{"location":"jwt/#23-payloadfunc","text":"Type:==func(data interface{}) MapClaims== Description: \u5728\u767b\u5f55\u671f\u95f4\u5c06\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002 \u4f7f\u7528\u6b64\u529f\u80fd\u53ef\u4ee5\u5411\u7f51\u7edc\u4ee4\u724c\u6dfb\u52a0\u5176\u4ed6\u6709\u6548\u8d1f\u8f7d\u6570\u636e\u3002 \u7136\u540e\u5728\u8bf7\u6c42\u671f\u95f4\u901a\u8fc7c.Get(\" JWT_PAYLOAD\")\u4f7f\u6570\u636e\u53ef\u7528\u3002 \u8bf7\u6ce8\u610f\uff0c\u6709\u6548\u8d1f\u8f7d\u672a\u52a0\u5bc6\u3002 jwt.io\u4e0a\u63d0\u5230\u7684\u5c5e\u6027\u4e0d\u80fd\u7528\u4f5c\u5730\u56fe\u7684\u952e\u3002 \u53ef\u9009\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u8bbe\u7f6e\u5176\u4ed6\u6570\u636e\u3002","title":"2.3 PayloadFunc"},{"location":"jwt/#24-unauthorized","text":"Type:==func(*ghttp.Request, int, string)== Description: \u7528\u6237\u53ef\u4ee5\u5b9a\u4e49\u81ea\u5df1\u7684\u672a\u7ecf\u6388\u6743\u7684\u529f\u80fd\u3002","title":"2.4 Unauthorized"},{"location":"jwt/#25-loginresponse","text":"Type:==func(*ghttp.Request, int, string, time.Time)== Description: \u7528\u6237\u53ef\u4ee5\u5b9a\u4e49\u81ea\u5df1\u7684LoginResponse\u51fd\u6570\u3002","title":"2.5 LoginResponse"},{"location":"jwt/#26-refreshresponse","text":"Type:==func(*ghttp.Request, int, string, time.Time)== Description: \u7528\u6237\u53ef\u4ee5\u5b9a\u4e49\u81ea\u5df1\u7684 RefreshResponse \u51fd\u6570.","title":"2.6 RefreshResponse"},{"location":"jwt/#27-identityhandler","text":"Type:==func(*ghttp.Request) interface{}== Description: \u8bbe\u7f6e\u8eab\u4efd\u5904\u7406\u7a0b\u5e8f\u529f\u80fd","title":"2.7 IdentityHandler"},{"location":"jwt/#3","text":"// \u793a\u4f8b\u4ee3\u7801 package v1 import ( jwt \"github.com/gogf/gf-jwt\" \"github.com/gogf/gf/frame/g\" \"github.com/gogf/gf/net/ghttp\" \"github.com/gogf/gf/os/glog\" \"github.com/gogf/gf/util/gvalid\" \"net/http\" \"time\" ) var ( // \u5e95\u5c42JWT\u4e2d\u95f4\u4ef6. GfJWTMiddleware *jwt.GfJWTMiddleware // \u81ea\u5b9a\u4e49\u767b\u5f55\u53c2\u6570\u9a8c\u8bc1\u89c4\u5219. ValidationRules = g.Map { \"username\": \"required\", \"password\": \"required\", } ) // \u521d\u59cb\u5316\u51fd\u6570\uff0c // \u91cd\u5199\u6b64\u51fd\u6570\u4ee5\u81ea\u5b9a\u4e49\u60a8\u81ea\u5df1\u7684JWT\u8bbe\u7f6e\u3002 func init() { authMiddleware, err := jwt.New(&jwt.GfJWTMiddleware{ Realm: \"test zone\", Key: []byte(\"secret key\"), Timeout: time.Minute * 5, MaxRefresh: time.Minute * 5, IdentityKey: \"id\", TokenLookup: \"header: Authorization, query: token, cookie: jwt\", TokenHeadName: \"Bearer\", TimeFunc: time.Now, Authenticator: Authenticator, LoginResponse: LoginResponse, RefreshResponse: RefreshResponse, Unauthorized: Unauthorized, IdentityHandler: IdentityHandler, PayloadFunc: PayloadFunc, }) if err != nil { glog.Fatal(\"JWT Error:\" + err.Error()) } GfJWTMiddleware = authMiddleware } // PayloadFunc \u662f\u5c06\u5728\u767b\u5f55\u671f\u95f4\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002 // \u4f7f\u7528\u6b64\u51fd\u6570\u53ef\u4ee5\u5411webtoken\u6dfb\u52a0\u989d\u5916\u7684\u6709\u6548\u8d1f\u8f7d\u6570\u636e\u3002 // \u7136\u540e\uff0c\u5728\u901a\u8fc7c.Get\uff08\u201cJWT_PAYLOAD\u201d\uff09\u8bf7\u6c42\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u3002 // \u8bf7\u6ce8\u610f\uff0c\u6709\u6548\u8d1f\u8f7d\u6ca1\u6709\u52a0\u5bc6\u3002 // \u4e0a\u9762\u63d0\u5230\u7684\u5c5e\u6027\u667a\u5a01\u6c64\u900a\u4e0d\u80fd\u7528\u4f5c\u5730\u56fe\u7684\u952e\u3002 // \u53ef\u9009\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u8bbe\u7f6e\u5176\u4ed6\u6570\u636e\u3002 func PayloadFunc(data interface{}) jwt.MapClaims { claims := jwt.MapClaims{} params := data.(map[string]interface{}) if len(params) > 0 { for k, v := range params { claims[k] = v } } return claims } // IdentityHandler \u8bbe\u7f6eJWT\u7684\u6807\u8bc6\u3002 func IdentityHandler(r *ghttp.Request) interface{} { claims := jwt.ExtractClaims(r) return claims[\"id\"] } // Unauthorized \u7528\u4e8e\u5b9a\u4e49\u81ea\u5b9a\u4e49\u7684\u672a\u6388\u6743\u56de\u8c03\u51fd\u6570\u3002 func Unauthorized(r *ghttp.Request, code int, message string) { r.Response.WriteJson(g.Map{ \"code\": code, \"msg\": message, }) r.ExitAll() } // LoginResponse \u7528\u4e8e\u5b9a\u4e49\u81ea\u5b9a\u4e49\u767b\u5f55\u6210\u529f\u56de\u8c03\u51fd\u6570\u3002 func LoginResponse(r *ghttp.Request, code int, token string, expire time.Time) { r.Response.WriteJson(g.Map{ \"code\": http.StatusOK, \"token\": token, \"expire\": expire.Format(time.RFC3339), }) r.ExitAll() } // RefreshResponse \u7528\u4e8e\u83b7\u53d6\u65b0\u4ee4\u724c\uff0c\u65e0\u8bba\u5f53\u524d\u4ee4\u724c\u662f\u5426\u8fc7\u671f\u3002 func RefreshResponse(r *ghttp.Request, code int, token string, expire time.Time) { r.Response.WriteJson(g.Map{ \"code\": http.StatusOK, \"token\": token, \"expire\": expire.Format(time.RFC3339), }) r.ExitAll() } // Authenticator \u7528\u4e8e\u9a8c\u8bc1\u767b\u5f55\u53c2\u6570\u3002 // \u5b83\u5fc5\u987b\u8fd4\u56de\u7528\u6237\u6570\u636e\u4f5c\u4e3a\u7528\u6237\u6807\u8bc6\u7b26\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728Claim Array\u4e2d\u3002 // \u68c0\u67e5\u9519\u8bef\uff08e\uff09\uff0c\u4ee5\u786e\u5b9a\u9002\u5f53\u7684\u9519\u8bef\u6d88\u606f\u3002 func Authenticator(r *ghttp.Request) (interface{}, error) { data := r.GetMap() if e := gvalid.CheckMap(data, ValidationRules); e != nil { return \"\", jwt.ErrFailedAuthentication } if data[\"username\"] == \"admin\" && data[\"password\"] == \"admin\" { return g.Map { \"username\": data[\"username\"], \"id\": data[\"username\"], }, nil } return nil, jwt.ErrFailedAuthentication }","title":"3.\u793a\u4f8b\u4ee3\u7801"},{"location":"jwt/#json-web-token-in-english","text":"","title":"Json Web Token In English"},{"location":"jwt/#1simple-configuration","text":"Name Type Example Description Realm string \"test zhou\" Realm name to display to the user. Required. SigningAlgorithm string \"HS256\" signing algorithm - possible values are HS256, HS384, HS512 ,Optional, default is HS256. Key []byte []byte(\"secret key\") Secret key used for signing. Required. Timeout time.Duration time.Minute * 5 Duration that a jwt token is valid. Optional, defaults to one hour. MaxRefresh time.Duration time.Minute * 5 This field allows clients to refresh their token until MaxRefresh has passed. Note that clients can refresh their token in the last moment of MaxRefresh. This means that the maximum validity timespan for a token is TokenTime + MaxRefresh. Optional, defaults to 0 meaning not refreshable. IdentityKey string \"id\" Set the identity key TokenLookup string \"header: Authorization, query: token, cookie: jwt\" TokenLookup is a string in the form of \" : \" that is used to extract token from the request. // Optional. Default value \"header:Authorization\". Possible values: \"header: \" \"query: \" \"cookie: \" TokenHeadName string \"Bearer\" TokenHeadName is a string in the header. Default value is \"Bearer\" PrivKeyFile string Private key file for asymmetric algorithms PubKeyFile string Public key file for asymmetric algorithms SendCookie bool Optionally return the token as a cookie SecureCookie bool Allow insecure cookies for development over http CookieHTTPOnly bool Allow cookies to be accessed client side for development CookieDomain string Allow cookie domain change for development SendAuthorization bool SendAuthorization allow return authorization header for every request DisabledAbort bool Disable abort() of context. CookieName string CookieName allow cookie name change for development","title":"1.Simple configuration"},{"location":"jwt/#2-callback-function","text":"","title":"2. Callback function"},{"location":"jwt/#21-authenticator_1","text":"Type:==func(r *ghttp.Request) (interface{}, error)== Description: Callback function that should perform the authentication of the user based on login info. Must return user data as user identifier, it will be stored in Claim Array. Required. Check error (e) to determine the appropriate error message.","title":"2.1 Authenticator"},{"location":"jwt/#22-authorizator_1","text":"Type:==func(data interface{}, r *ghttp.Request) bool== Description: Callback function that should perform the authorization of the authenticated user. Called only after an authentication success. Must return true on success, false on failure. Optional, default to success.","title":"2.2 Authorizator"},{"location":"jwt/#23-payloadfunc_1","text":"Type:==func(data interface{}) MapClaims== Description: Callback function that will be called during login. Using this function it is possible to add additional payload data to the webtoken. The data is then made available during requests via c.Get(\"JWT_PAYLOAD\"). Note that the payload is not encrypted. The attributes mentioned on jwt.io can't be used as keys for the map. Optional, by default no additional data will be set.","title":"2.3 PayloadFunc"},{"location":"jwt/#24-unauthorized_1","text":"Type:==func(*ghttp.Request, int, string)== Description: User can define own Unauthorized func.","title":"2.4 Unauthorized"},{"location":"jwt/#25-loginresponse_1","text":"Type:==func(*ghttp.Request, int, string, time.Time)== Description: User can define own LoginResponse func.","title":"2.5 LoginResponse"},{"location":"jwt/#26-refreshresponse_1","text":"Type:==func(*ghttp.Request, int, string, time.Time)== Description: User can define own RefreshResponse func.","title":"2.6 RefreshResponse"},{"location":"jwt/#27-identityhandler_1","text":"Type:==func(*ghttp.Request) interface{}== Description: Set the identity handler function","title":"2.7 IdentityHandler"},{"location":"jwt/#3-sample-code","text":"package auth import ( jwt \"github.com/gogf/gf-jwt\" \"github.com/gogf/gf/frame/g\" \"github.com/gogf/gf/net/ghttp\" \"github.com/gogf/gf/os/glog\" \"github.com/gogf/gf/util/gvalid\" \"net/http\" \"time\" ) var ( // The underlying JWT middleware. GfJWTMiddleware *jwt.GfJWTMiddleware // Customized login parameter validation rules. ValidationRules = g.Map { \"username\": \"required\", \"password\": \"required\", } ) // Initialization function, // rewrite this function to customized your own JWT settings. func init() { authMiddleware, err := jwt.New(&jwt.GfJWTMiddleware{ Realm: \"test zone\", Key: []byte(\"secret key\"), Timeout: time.Minute * 5, MaxRefresh: time.Minute * 5, IdentityKey: \"id\", TokenLookup: \"header: Authorization, query: token, cookie: jwt\", TokenHeadName: \"Bearer\", TimeFunc: time.Now, Authenticator: Authenticator, LoginResponse: LoginResponse, RefreshResponse: RefreshResponse, Unauthorized: Unauthorized, IdentityHandler: IdentityHandler, PayloadFunc: PayloadFunc, }) if err != nil { glog.Fatal(\"JWT Error:\" + err.Error()) } GfJWTMiddleware = authMiddleware } // PayloadFunc is a callback function that will be called during login. // Using this function it is possible to add additional payload data to the webtoken. // The data is then made available during requests via c.Get(\"JWT_PAYLOAD\"). // Note that the payload is not encrypted. // The attributes mentioned on jwt.io can't be used as keys for the map. // Optional, by default no additional data will be set. func PayloadFunc(data interface{}) jwt.MapClaims { claims := jwt.MapClaims{} params := data.(map[string]interface{}) if len(params) > 0 { for k, v := range params { claims[k] = v } } return claims } // IdentityHandler sets the identity for JWT. func IdentityHandler(r *ghttp.Request) interface{} { claims := jwt.ExtractClaims(r) return claims[\"id\"] } // Unauthorized is used to define customized Unauthorized callback function. func Unauthorized(r *ghttp.Request, code int, message string) { r.Response.WriteJson(g.Map{ \"code\": code, \"msg\": message, }) r.ExitAll() } // LoginResponse is used to define customized login-successful callback function. func LoginResponse(r *ghttp.Request, code int, token string, expire time.Time) { r.Response.WriteJson(g.Map{ \"code\": http.StatusOK, \"token\": token, \"expire\": expire.Format(time.RFC3339), }) r.ExitAll() } // RefreshResponse is used to get a new token no matter current token is expired or not. func RefreshResponse(r *ghttp.Request, code int, token string, expire time.Time) { r.Response.WriteJson(g.Map{ \"code\": http.StatusOK, \"token\": token, \"expire\": expire.Format(time.RFC3339), }) r.ExitAll() } // Authenticator is used to validate login parameters. // It must return user data as user identifier, it will be stored in Claim Array. // Check error (e) to determine the appropriate error message. func Authenticator(r *ghttp.Request) (interface{}, error) { data := r.GetMap() if e := gvalid.CheckMap(data, ValidationRules); e != nil { return \"\", jwt.ErrFailedAuthentication } if data[\"username\"] == \"admin\" && data[\"password\"] == \"admin\" { return g.Map { \"username\": data[\"username\"], \"id\": data[\"username\"], }, nil } return nil, jwt.ErrFailedAuthentication }","title":"3. Sample code"},{"location":"jwt/english/","text":"","title":"English"}]}